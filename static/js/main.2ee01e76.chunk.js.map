{"version":3,"sources":["components/Editor/Editor.js","components/Header.js","panels/CodeEditorPanel.js","panels/DataEditorPanel.js","descriptions/descriptions.js","descriptor/global.js","descriptor/utils.js","panels/VisualizationGivenDataPanel.js","components/Loader.js","utils/color.js","components/Descriptions.js","panels/DescriptionPanel.js","demo/demo.js","linkConditions/utils.js","linkConditions/conditionOperations.js","descriptor/NLDComponents.js","descriptor/compare.js","attributeRelation/attributeRelation.js","attributeRelation/graphDistance.js","descriptor/entity2element.js","components/TitleBar.js","utils/parameterStyle.js","components/Icon.js","components/DescriptionsLegend.js","panels/DescriptionLegendPanel.js","Main.js","descriptor/index.js","linkConditions/linkCondition.js","components/GallaryItem.js","pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","code","setCode","language","style","fontFamily","value","onValueChange","highlight","languages","padding","className","Header","title","height","width","lineHeight","fontWeight","borderLeft","fontSize","color","textIndent","CodeEditorPanel","codeStr","setCodeStr","submit","useState","modified","setModified","minWidth","margin","display","flexDirection","marginTop","background","position","right","top","zIndex","cursor","onClick","e","DataEditorPanel","dataStr","setDataStr","linkConditionDescription","linkConditions","Array","isArray","length","condition","slice","sort","a","b","coverage","relation","attribute","SUPPORTED_TYPES","Set","COMMON_STYLE_CHANNELS","DEFAULT_ATTRIBUTE","Map","fill","stroke","rx","ry","BASIC_SVG_ELEMENTS","forEach","attributes","name","concat","set","SHARED_CHANNELS","DESCRIPTION_TEMPLATE","constituent","entityType","numberOfElementsEachEntity","_entityType","_numberOfElementsEachEntity","onePrimitive","numberOfLabels","ordinal","tagName","multiPrimitive","tagNames","textualizeVaringStringArray","multiPrimitiveTagName","attrVal","_tagName","_attrName","_attrVal","textualizeStringArray","channels2attribute","isfirstWordUpper","channels","samePrimitive","sameLabelIs","sameLabelIBegin","sameLabelIsStop","correlationC2C","chanName","attrName","chanVal","attrVals","correlationN2C","attrValMin","attrValMax","correlationN2N","isUp","correlationUndefined","PARAMETER_TYPE","entity","element","channel","NUMERICAL","CATEGORICAL","dom","ownAttrs","computedStyles","Object","assign","i","BASIC_STYLES","get","cx","baseVal","cy","x1","y1","x2","y2","x","y","points","from","map","point","textContent","object","isEqual","every","_","aProps","getOwnPropertyNames","bProps","propName","this","console","error","deepcopy","obj","JSON","parse","stringify","dfs","callback","stack","index","children","indexNext","pop","child","push","NoLinDiagram","data","nodeAttrs","linkAttrs","nodes","node","attr","entries","key","has","links","link","delete","computeAttributeTypeAndRange","NUMERICAL_LENGTH_THRESHOLD","range","isAllNumerical","type","array","connector","str","item","join","number2ordinal","number","n","special","deca","Math","floor","entityType2dataKey","isFloat","Number","VisualizationGivenDataPanel","dataFolder","svg","elementInfo","layoutDescriptions","label2Encodings","entityElementsGroups","visibleElements","nodeMeanings","switchedOn","ref","useRef","info","setInfo","setElement","encodings","setEncodings","tooltipVisible","setToolTipVisible","tooltipTop","setToolTipTop","tooltipLeft","setToolTipLeft","setData","useEffect","current","innerHTML","appendChild","d3","on","el","target","hasAttribute","idx","parseInt","getAttribute","label2attr2diff","label","res","keys","l","attrs","styles","indexOf","split","filter","getEncodings","document","body","Tooltip","visible","left","tooltip","getElementById","getBoundingClientRect","transform","term","entityIndex","excludeKeys","maxBBox","LEGENDS_ELEMENT_WIDTH","min","max","k","bbox","newElement","group","cloneNode","isNaN","_idx","setAttribute","linkDescription","layoutEncodings","isTopo","elements","desc","parameters","add","encoding","getLayoutEncodings","id","visibility","dangerouslySetInnerHTML","__html","val","marginLeft","toFixed","verticalAlign","viewBox","XMLSerializer","serializeToString","alt","src","Loader","state","colorTable","findSimiliarColor","colorRGBA","r","g","minDistance","MAX_VALUE","vec","r_","g_","b_","d","DescriptionTerm","onMouseOver","backgroundColor","onMouseLeave","content","getTreeData","graphDescriptions","defaultExpandNodes","parentKey","switch","Descriptions","loadingText","loading","treeData","selectable","defaultExpandedKeys","DescriptionPanel","paddingLeft","orientation","demos","miserables","nodeEncoding","preload","demo","fetch","then","text","json","extractAttributes","v","arr","q1","q3","getNumericalStats","generateLinkingConditions","node1","node2","val1","val2","undefined","overlap","l2","includes","combinations","results","copy","prefix","powerSet","abs","getNormalizedDifference","rawDiff","unionCondition","condition1","condition2","accumulateCondition","excludeCondition","NLDCompDiff","isItemEmpty","indexes","unstableComponents","unstableArray","unstableItem","NLDComponents","osvg","basicElementArray","anotherNLDComponents","diff","ele1","ele2","eleDiff","compare","element1","element2","NLDComponents1","NLDComponents2","diffWith","computePearsonCorrelation","X","Y","Statistics","correlationCoefficient","checkDataType","parseFloat","first","second","isInteger","size","attributeRelation","threshold","dataTypeX","dataTypeY","pearsonCorrelation","typeX","typeY","correlation","attributeMapping","MIN_VALUE","layoutRelation","graph","N","idToIdx","euclidMatrix","j","sqrt","floydMatrix","Infinity","fr","to","calcDistance","flat","combined","floyd","euclid","mapAttribute2Channel","func","entity2element","element2label","svgOrigin","nldOrigin","shuffledGraph","shuffledRange","svgShuffled","nldShuffled","diffs","isEmpty","eliminate","diffItem","elementIndex","attr2diff","diff1","diff2","mergedDiff","mergeDiff","label2elements","element2entity","eleIndexSet","eleIndex","channelNames","mapEntity2Element","labelsOfElements","swapCache","log","clonedGraph","thisEntity","svgControl","entitiesWithDiffAttr_INDEX","findEntitiesWithDiffAttr_INDEX","valueStack","isAttributesAllSame","some","elementFrequency","nldControl","nldBeforeSwap","nldAfterSwap","indexofSwapDiff","svgAfterSwap","swapDiff","getIndexOfDifferences","elementJndex","TitleBar","borderBottom","processValue","replace","styleParameter","parameter","test","processIcon","Icon","opacity","isNumber","processFloat","upperFirst","s","charAt","toUpperCase","getTreeDataLegend","descriptions","SVG","p","duplicate","getBBox","dataTerm","elementsIdx","attrValue","channelElement","class","elIcon","orIcon","paddingRight","onMouseEnter","currentTarget","e1","e2","channel1","channel2","elIcons","clonedSVG","elIconsBBox","elIconsMaxBBox","reduce","removeChild","remove","marginRight","tagAttr","childIdx","childParameters","DescriptionsLegend","DescriptionLegendPanel","nodeIcon","linkIcon","icon","description","DESCRIPTIONS","TOOLTIPS","LEGENDS","TECHNIQUES","Main","runID","setRunID","setLoading","createElement","setSVG","setVisibleElements","graphDescripitons","setGraphDescriptions","setLayoutDescriptions","setElementInfo","setLabel2Encodings","setLinkConditions","setEntityElementsGroups","techniqueChoice","setTechniqueChoice","useParams","setDataFolder","getPreloadData","firstChild","allElements","ele","svgToArray","oridata","beginTime","performance","now","Function","nldComponents","node2element","nodeElement2label","link2element","linkElement2label","element2link","node2element_i","linkElements","linkset","nodeset","nodeLabel2attr2diff","linkLabel2attr2diff","configs","genDescsForAttr2Diff","attr2diffEntries","relatedElements","relatedElementsIdx","result","encodingDetailDescription","template","elementSet","descrpitionSentence","classes","label2class","elementDescription","tagNameChoiceDescriptions","tagName2attr2val","commonStyleDiff","thisTagNameRelatedElements","thisTagNameRelatedElementsIdx","valueArrayOfAttributesControlsThisTag","thisTagNameDescriptions","attr2diffEntriesWithThisTag","thisTagDiff","svgBBox","elementIndexSet","box","endTime","allElementsIdx","xs","ys","xAttrs","yAttrs","xRelation","yRelation","axis","attrNames","descriptor","svgStr","preloadData","fetchEncodingDescriptions","conditions","nodeMap","linkSet","source","excludeUnionResult","linkCnt","possibleConditions","frequency","linkCondition","newSvg","_info","entityElementsGroup","paddingBottom","flex","overflowY","float","Group","options","t","onChange","optionType","GallaryItem","image","route","history","useHistory","hoverable","borderRadius","cover","objectFit","Meta","whiteSpace","textOverflow","overflow","HomePage","alignItems","maxWidth","marginBottom","flexWrap","justifyContent","titleMap","nodeMeaningsMap","App","exact","path","render","match","params","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.2ee01e76.chunk.js","sourcesContent":["import React from \"react\";\nimport SimpleCodeEditor from \"react-simple-code-editor\";\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-javascript\";\nimport \"prismjs/themes/prism.css\"; //Example style, you can use another\nimport \"./style.css\"\n\nfunction Editor({ code, setCode, language }) {\n    return (\n        <SimpleCodeEditor\n            style={{\n                fontFamily: 'Consolas, Menlo, monospace'\n            }}\n            value={code}\n            onValueChange={(code) => setCode(code)}\n            highlight={(code) => highlight(code, languages[language])}\n            padding={10}\n            className='simple-code-editor'\n        />\n    );\n}\n\nexport {\n    Editor\n}","export function Header({ title }) {\n    return (\n        <div\n            style={{\n                height: 50,\n                // width: 'calc(100% - 10px)',\n                width: \"auto\",\n                lineHeight: \"50px\",\n                fontWeight: \"bold\",\n                borderLeft: \"5px solid #eee\",\n                fontSize: \"2em\",\n                fontFamily: \"Times\",\n                color: \"#333333\",\n                textIndent: 20,\n            }}\n        >\n            {title}\n        </div>\n    )\n}\n","import { Editor } from \"../components/Editor/Editor\"\nimport { Header } from \"../components/Header\"\nimport { BsPipFill, BsPlay, BsPlayFill } from \"react-icons/bs\"\nimport { useState } from \"react\"\nfunction CodeEditorPanel({ codeStr, setCodeStr, style, submit }) {\n    const [modified, setModified] = useState(false)\n\n    return (\n        <div\n            style={{\n                ...style,\n                minWidth: 300,\n                // height: 1000,\n                margin: 5,\n                display: \"flex\",\n                flexDirection: \"column\",\n            }}\n        >\n            <Header title=\"Code Editor\" />\n            <div\n                style={{\n                    height: \"100%\",\n                    marginTop: 5,\n                    background: \"#f6f6f6\",\n                    position: 'relative'\n                }}\n            >\n                <Editor code={codeStr} setCode={(code) => {\n                    setModified(true)\n                    setCodeStr(code)\n                }} language=\"js\" />\n                <div style={{\n                    position: 'absolute',\n                    right: 0,\n                    top: 0,\n                }}>\n                    {\n                        modified ? <BsPlayFill\n                            fontSize={28}\n                            style={{\n                                zIndex: 1000,\n                                color: '#3b5fc0',\n                                cursor: 'pointer',\n                                margin: 5,\n                            }}\n                            onClick={(e) => {\n                                setModified(false)\n                                submit()\n                            }} /> : <BsPlay \n                            style={{\n                                color: '#a9b0bc'\n                            }}\n                            fontSize={28} />\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport { CodeEditorPanel }\n","import { Editor } from \"../components/Editor/Editor\"\nimport { Header } from \"../components/Header\"\n\nfunction DataEditorPanel({ dataStr, setDataStr, style }) {\n    return (\n        <div\n            style={{\n                ...style,\n                minWidth: 300,\n                margin: 5,\n                display: \"flex\",\n                flexDirection: \"column\",\n            }}\n        >\n            <Header title=\"Data Editor\" />\n            <div\n                style={{\n                    height: \"100%\",\n                    marginTop: 5,\n                    background: \"#f6f6f6\",\n                }}\n            >\n                <Editor code={dataStr} setCode={setDataStr} language=\"js\" />\n            </div>\n        </div>\n    )\n}\n\nexport { DataEditorPanel }\n","function linkConditionDescription(linkConditions) {\n    if (!Array.isArray(linkConditions) || linkConditions.length === 0) return \"\"\n    // 用coverage降序排列，找出coverage最大的\n    const conditions = linkConditions\n        .slice()\n        .sort((a, b) => b.coverage - a.coverage)\n    // 暂不考虑多个condition\n    const condition = conditions[0]\n\n    if (condition.relation === \"common\") {\n        return `Two nodes are connected if their attributes <span class='description-parameter'>${\n            condition.attribute\n        }</span> are with a same value${\n            condition.value === \"@@any\"\n                ? \"\"\n                : `: <span class='description-parameter attribute-parameter'>${condition.value}</span>`\n        }.`\n    }\n    if (condition.relation === \"overlap\") {\n        return `Two nodes are connected if their attributes <span class='description-parameter attribute-parameter'>${\n            condition.attribute\n        }</span> have common values${\n            condition.value === \"@@any\"\n                ? \"\"\n                : `: <span class='description-parameter attribute-parameter'>${condition.value}</span>`\n        }.`\n    }\n    if (condition.relation === \"similar\") {\n        return `Two nodes are connected if their attributes <span class='description-parameter attribute-parameter'>${condition.attribute}</span> are close, with a difference less than: <span class='description-parameter'>${condition.value}</span>.`\n    }\n    if (condition.relation === \"same-bin\") {\n        return `Two nodes are connected if their attributes <span class='description-parameter attribute-parameter'>${\n            condition.attribute\n        }</span> are within the same bin${\n            condition.value === \"@@any\"\n                ? \"\"\n                : `: <span class='description-parameter attribute-parameter'>${condition.value}</span>`\n        }.`\n    }\n}\n\nexport { linkConditionDescription }\n","// great: it is a good channel to encode info\n// maybe: it is not really good enough\n\nimport {\n    number2ordinal,\n    textualizeStringArray,\n    textualizeVaringStringArray,\n} from \"./utils\"\n\nconst SUPPORTED_TYPES = new Set([\"string\", \"number\", \"undefined\", \"boolean\"])\n\n// rare: it is bad to encode info\nconst COMMON_STYLE_CHANNELS = new Set([\n    \"fill\", // great, color\n    \"fill-opacity\", // maybe, numerical\n    \"stroke\", // great, color\n    \"stroke-dasharray\", // rare\n    \"stroke-opacity\", // maybe, numerical\n    \"stroke-width\", // great, numerical\n])\n\nconst COMMON_POSITION_CHANNELS = new Map([\n    [\"circle\", new Set([\"cx\", \"cy\"])], // great, numerical\n    [\"ellipse\", new Set([\"cx\", \"cy\"])], // great, numerical\n    [\"line\", new Set([\"x1\", \"x2\", \"y1\", \"y2\"])], // great, numerical\n    [\"polygon\", new Set([\"points\"])], // great, numerical array\n    [\"polyline\", new Set([\"points\"])], // great, numerical array\n    [\"rect\", new Set([\"x\", \"y\"])], // great, rx/ry: mayby, all numerical\n    [\"path\", new Set([])], // great, categorical + numerical\n    [\"text\", new Set([\"x\", \"y\"])],\n])\n\nconst DEFAULT_ATTRIBUTE = {\n    fill: \"#000000\",\n    \"fill-opacity\": 1,\n    stroke: \"#000000\",\n    \"stroke-dasharray\": \"none\",\n    \"stroke-opacity\": 1,\n    rx: \"auto\",\n    ry: \"auto\",\n}\n\nconst BASIC_SVG_ELEMENTS = new Map([\n    [\"circle\", [\"r\"]], // great, numerical\n    [\"ellipse\", [\"rx\", \"ry\"]], // great, numerical\n    [\"line\", []], // great, numerical\n    [\"polygon\", []], // great, numerical array\n    [\"polyline\", []], // great, numerical array\n    [\"rect\", [\"width\", \"height\", \"rx\", \"ry\"]], // great, rx/ry: mayby, all numerical\n    [\"path\", []], // great, categorical + numerical\n    [\"text\", []],\n])\nBASIC_SVG_ELEMENTS.forEach((attributes, name) => {\n    attributes = attributes.concat([...COMMON_STYLE_CHANNELS])\n    BASIC_SVG_ELEMENTS.set(name, new Set(attributes))\n})\n\nconst CONNECTOR_CHAR = \"→\"\n\nconst SHARED_CHANNELS = new Set([\"rx\", \"ry\", \"cx\", \"cy\", \"points\"])\n\nconst DESCRIPTION_TEMPLATE = {\n    constituent: (entityType, numberOfElementsEachEntity) => {\n        return (_entityType, _numberOfElementsEachEntity) => {\n            return `Each ${_entityType} consists of ${\n                numberOfElementsEachEntity > 1 ? \"\" : \"only\"\n            } ${_numberOfElementsEachEntity} ${\n                numberOfElementsEachEntity > 1 ? \"different\" : \"\"\n            } element${numberOfElementsEachEntity > 1 ? \"s\" : \"\"}.`\n        }\n    },\n    onePrimitive: (numberOfLabels) => {\n        return (ordinal, tagName) => {\n            if (numberOfLabels > 1) {\n                return `The ${ordinal} element is a ${tagName}.`\n            } else {\n                return `It is a ${tagName}.`\n            }\n        }\n    },\n    multiPrimitive: (numberOfLabels) => {\n        return (ordinal, tagNames) => {\n            if (numberOfLabels > 1) {\n                return `For the ${ordinal} element, its <span class='description-parameter channel-parameter'>tagName</span> varies among multiple shapes: ${textualizeVaringStringArray(\n                    tagNames\n                )}.`\n            } else {\n                return `Its <span class='description-parameter channel-parameter'>tagName</span> varies among multiple shapes: ${textualizeVaringStringArray(\n                    tagNames\n                )}.`\n            }\n        }\n    },\n    multiPrimitiveTagName: (attrVal) => {\n        return (_tagName, _attrName, ..._attrVal) => {\n            // when the value of attrName is from attrVal.min to attrVal.max,\n            // or the value of attrName is attrVal[0], ..., or attrVal[-1],\n            _attrVal.sort()\n            if (\"max\" in attrVal && \"min\" in attrVal) {\n                return `When the value of ${_attrName} is from ${_attrVal[0]} to ${_attrVal[1]}, its <span class='description-parameter channel-parameter'>tagName</span> is changed into ${_tagName}.`\n            } else {\n                return `When the value of ${_attrName} is ${textualizeStringArray(\n                    _attrVal,\n                    \"or\"\n                )}, its <span class='description-parameter channel-parameter'>tagName</span> is changed into ${_tagName}.`\n            }\n        }\n    },\n    channels2attribute: (isfirstWordUpper = true) => {\n        return (channels, attribute) => {\n            return `${isfirstWordUpper ? \"I\" : \"i\"}ts ${textualizeStringArray(\n                channels\n            )} encode${\n                channels.length > 1 ? \"\" : \"s\"\n            } the attribute ${attribute}.`\n        }\n    },\n    samePrimitive: (sameLabelIs) => {\n        return (sameLabelIBegin, sameLabelIsStop, ordinal) => {\n            if (sameLabelIs.length > 1) {\n                return `For the ${sameLabelIBegin} to ${sameLabelIsStop} elements, its encoding scheme is same to the ${ordinal} element.`\n            } else {\n                return `For the ${sameLabelIBegin} element, its encoding scheme is same to the ${ordinal} element.`\n            }\n        }\n    },\n    correlationC2C: (chanName, attrName, chanVal, attrVals) => {\n        return `When the value of ${attrName} is ${textualizeStringArray(\n            attrVals.sort(),\n            \"or\"\n        )}, its ${chanName} is changed into ${chanVal}.`\n    },\n\n    correlationN2C: (chanName, attrName, chanVal, attrValMin, attrValMax) => {\n        return `When the value of ${attrName} is from ${attrValMin} to ${attrValMax}, its ${chanName} is changed into ${chanVal}.`\n    },\n    correlationN2N: (isUp) => {\n        return (chanName, attrName) => {\n            return `The greater ${attrName}, the ${\n                isUp ? \"greater📈\" : \"smaller📉\"\n            } its ${chanName}.`\n        }\n    },\n    correlationUndefined: (chanName, attrName) => {\n        return `The correlation between ${chanName} and ${attrName} can not be determined yet.`\n    },\n}\n\nconst PARAMETER_TYPE = {\n    entity: \"entity-parameter\",\n    element: \"element-parameter\",\n    channel: \"channel-parameter\",\n    attribute: \"attribute-parameter\",\n    value: \"value-parameter\",\n}\n\nexport {\n    PARAMETER_TYPE,\n    BASIC_SVG_ELEMENTS,\n    COMMON_STYLE_CHANNELS,\n    DEFAULT_ATTRIBUTE,\n    CONNECTOR_CHAR,\n    COMMON_POSITION_CHANNELS,\n    SHARED_CHANNELS,\n    DESCRIPTION_TEMPLATE,\n    SUPPORTED_TYPES,\n}\n","/**\n * @create date 2021-03-07 20:19:00\n * @modify date 2021-03-07 20:19:00\n * @desc [description]\n */\nimport {\n    BASIC_SVG_ELEMENTS,\n    DEFAULT_ATTRIBUTE,\n    SUPPORTED_TYPES,\n} from \"./global\"\nimport * as d3 from \"d3\"\n\nexport const NUMERICAL = \"NUMERICAL\"\nexport const CATEGORICAL = \"CATEGORICAL\"\n\n// parse attributes\nconst attrValueParser = (value) => {\n    // if (rgba(value).length == 4) {\n    //     // color\n    //     return rgba(value)\n    // } else\n    if (!isNaN(parseFloat(value))) {\n        return parseFloat(value)\n    } else {\n        return value\n    }\n}\n\nexport const dom = {\n    /**\n     * count the number of basic elements contained in the input svg\n     * @param {html svg element} svg\n     */\n    countBasicElementsOf: function (svg) {\n        const count = {}\n        BASIC_SVG_ELEMENTS.forEach((_, name) => {\n            const size = d3.select(svg).selectAll(name).size()\n            count[name] = size\n        })\n\n        /**\n         * get difference between two count result\n         * if count2 > count1, it returns positive number\n         * @param {Object} count1: {name: String (element name), count: Number}\n         * @param {Object} count2: {name: String (element name), count: Number}\n         */\n        count.prototype.minus = function (subcount) {\n            const diff = {}\n            const names = new Set([\n                ...Object.keys(this),\n                ...Object.keys(subcount),\n            ])\n            names.forEach((name) => {\n                diff[name] =\n                    (subcount[name] ? subcount[name] : 0) -\n                    (this[name] ? this[name] : 0)\n            })\n            return diff\n        }\n        return count\n    },\n    getComputedStyle: function (element) {\n        // too expensive\n        // const computedStyles = window.getComputedStyle(element)\n        const ownAttrs = element.attributes // element.getAttributeNames()\n        const computedStyles = Object.assign({}, DEFAULT_ATTRIBUTE)\n        for (let i = 0; i < ownAttrs.length; i++) {\n            const name = ownAttrs[i].name\n            const value = ownAttrs[i].value\n            computedStyles[name] = value // attrValueParser(value)\n        }\n\n        let style = {}\n        let BASIC_STYLES = BASIC_SVG_ELEMENTS.get(element.tagName)\n        if (BASIC_STYLES) {\n            // step1: for positions\n            if (element.tagName == \"circle\" || element.tagName == \"ellipse\") {\n                // const [cx, cy] = getComputedPosition(element, [\n                //     element.cx.baseVal.value,\n                //     element.cy.baseVal.value,\n                // ])\n                const [cx, cy] = [\n                    element.cx.baseVal.value,\n                    element.cy.baseVal.value,\n                ]\n                style = { ...style, cx, cy }\n            } else if (element.tagName == \"line\") {\n                // const [x1, y1] = getComputedPosition(element, [\n                //     element.x1.baseVal.value,\n                //     element.y1.baseVal.value,\n                // ])\n                const [x1, y1] = [\n                    element.x1.baseVal.value,\n                    element.y1.baseVal.value,\n                ]\n                const [x2, y2] = [\n                    element.x2.baseVal.value,\n                    element.y2.baseVal.value,\n                ]\n                style = { ...style, x1, y1, x2, y2 }\n            } else if (element.tagName == \"rect\") {\n                const [x, y] = [\n                    element.x.baseVal.value,\n                    element.y.baseVal.value,\n                ]\n                style = { ...style, x, y }\n            } else if (\n                element.tagName === \"polygon\" ||\n                element.tagName === \"polyline\"\n            ) {\n                const points = Array.from(element.points).map(({ x, y }) =>\n                    // getComputedPosition(element, [x, y])\n                    [x, y]\n                )\n                points.forEach((point, i) => {\n                    style[`points[${i}]['x']`] = points[0]\n                    style[`points[${i}]['y']`] = points[1]\n                })\n            } else if (element.tagName === \"path\") {\n                // TODO\n            } else if (element.tagName === \"text\") {\n                const [x, y] = [\n                    element.x.baseVal.value,\n                    element.y.baseVal.value,\n                ]\n                const textContent = element.textContent\n                style = { ...style, textContent, x, y }\n            }\n\n            // step2: for else (e.g. r, width, fill...)\n            BASIC_STYLES.forEach((channel) => {\n                style[channel] = computedStyles[channel]\n            })\n\n            return style\n\n            /**\n             * transform a position with transform matrix (transformation)\n             * @param {Object} style: {tagName: 'xxx', style1: 'xx', style2: 'xx', ...}\n             * @param {String} transformation:  e.g. \"matrix(1, 0, 0, 1, 10, 10)\"\n             */\n            function getComputedPosition(element, position) {\n                //! compute position, assume only translate, no rotate, no scale\n                let thisNode = element\n                let [x, y] = position\n                // do {\n                //     if (thisNode.transform.baseVal.length) {\n                //         const matrix = thisNode.transform.baseVal[0].matrix\n                //         x += matrix.e\n                //         y += matrix.f\n                //     }\n                //     thisNode = thisNode.parentNode\n                // } while (thisNode.tagName !== \"svg\")\n                return [x, y]\n            }\n        }\n    },\n}\n\nexport const object = {\n    isEqual: function (a, b) {\n        //! only object, number, array, string are supported\n        if (typeof a !== typeof b) {\n            return false\n        }\n\n        if (\n            typeof a == \"string\" ||\n            typeof a == \"number\" ||\n            typeof a == \"undefined\" ||\n            typeof a == \"boolean\"\n        ) {\n            return a == b\n        } else if (typeof a == \"object\") {\n            if (Array.isArray(a) && Array.isArray(b)) {\n                return (\n                    a.length == b.length &&\n                    a.every((_, i) => this.isEqual(a[i], b[i]))\n                )\n            } else if (!Array.isArray(a) && !Array.isArray(b)) {\n                // Create arrays of property names\n                const aProps = Object.getOwnPropertyNames(a)\n                const bProps = Object.getOwnPropertyNames(b)\n\n                // If number of properties is different,\n                // objects are not equivalent\n                if (aProps.length != bProps.length) {\n                    return false\n                }\n\n                for (var i = 0; i < aProps.length; i++) {\n                    var propName = aProps[i]\n\n                    // If values of same property are not equal,\n                    // objects are not equivalent\n                    if (!this.isEqual(a[propName], b[propName])) {\n                        return false\n                    }\n                }\n\n                // If we made it this far, objects\n                // are considered equivalent\n                return true\n            } else {\n                return false\n            }\n        } else {\n            console.error(`Not supported type: ${typeof a}`)\n        }\n    },\n    /**\n     * Deep Copy an object\n     * @param {JSON format data} obj\n     */\n    deepcopy: function (obj) {\n        return JSON.parse(JSON.stringify(obj))\n    },\n    dfs: function (obj, callback) {\n        const stack = []\n        let index = obj\n        while (true) {\n            if (index) {\n                callback(index)\n                if (index.children && index.children.length) {\n                    let children = Array.from(index.children)\n                    const indexNext = children.pop()\n                    children.forEach((child) => stack.push(child))\n                    index = indexNext\n                } else {\n                    index = stack.pop()\n                }\n            } else {\n                break\n            }\n        }\n    },\n}\n\nexport const NoLinDiagram = {\n    /**\n     * get attributes of nodes and links\n     * @param {standard node-link data format} data\n     * @returns {nodes: node attributes array, links: link attributes array}\n     */\n    getAttributesOf: function (data) {\n        const nodeAttrs = new Map()\n        const linkAttrs = new Map()\n        const CONNECTOR = \"@\"\n        data.nodes.forEach((node) => {\n            for (let attr in node) {\n                if (typeof node[attr] == \"object\") {\n                    // array or obj\n                    Object.entries(node[attr]).forEach(([i, d]) => {\n                        const key = `${attr}${CONNECTOR}${i}`\n                        if (nodeAttrs.has(key)) {\n                            nodeAttrs.get(key).push(node[attr][i])\n                        } else {\n                            nodeAttrs.set(key, [node[attr][i]])\n                        }\n                    })\n                } else if (SUPPORTED_TYPES.has(typeof node[attr]) >= 0) {\n                    if (nodeAttrs.has(attr)) {\n                        nodeAttrs.get(attr).push(node[attr])\n                    } else {\n                        nodeAttrs.set(attr, [node[attr]])\n                    }\n                }\n            }\n        })\n\n        data.links.forEach((link) => {\n            for (let attr in link) {\n                if (linkAttrs.has(attr)) {\n                    linkAttrs.get(attr).push(link[attr])\n                } else {\n                    linkAttrs.set(attr, [link[attr]])\n                }\n            }\n        })\n\n        // delete unique identities\n        nodeAttrs.delete(\"id\")\n        linkAttrs.delete(\"source\")\n        linkAttrs.delete(\"target\")\n\n        nodeAttrs.forEach((value, name) => {\n            nodeAttrs.set(name, computeAttributeTypeAndRange(value))\n        })\n        linkAttrs.forEach((value, name) => {\n            linkAttrs.set(name, computeAttributeTypeAndRange(value))\n        })\n\n        return {\n            nodes: nodeAttrs,\n            links: linkAttrs,\n        }\n\n        /**\n         *\n         * @param {*} data\n         * @param {*} NUMERICAL_LENGTH_THRESHOLD\n         */\n        function computeAttributeTypeAndRange(\n            data,\n            NUMERICAL_LENGTH_THRESHOLD = 10\n        ) {\n            let range = []\n            let isAllNumerical = true\n            let type = NUMERICAL\n            data.forEach((value) => {\n                range.push(value)\n                if (typeof value !== \"number\") {\n                    isAllNumerical = false\n                }\n            })\n            if (!isAllNumerical || range.length <= NUMERICAL_LENGTH_THRESHOLD) {\n                type = CATEGORICAL\n            }\n            return {\n                type,\n                range,\n            }\n        }\n    },\n}\n\n/**\n * returns a NLized string, e.g., ['a', 'b'] => 'a and b', ['a', 'b', 'c'] => 'a, b, and c'\n * @param {String[]} array\n * @param {String} connector\n */\nexport function textualizeVaringStringArray(array, connector = \"and\") {\n    let str = \"\"\n    if (array.length == 1) {\n        return array[0]\n    }\n    if (array.length == 2) {\n        // return array.join(` ${connector} `)\n        return `from ${array[0]} to ${array[1]}`\n    }\n    array.forEach((item, i) => {\n        str += item\n        if (i < array.length - 1) {\n            if (i == array.length - 2) {\n                str += `, ${connector} `\n            } else {\n                str += \", \"\n            }\n        }\n    })\n    return str\n}\n\n/**\n * returns a NLized string, e.g., ['a', 'b'] => 'a and b', ['a', 'b', 'c'] => 'a, b, and c'\n * @param {String[]} array\n * @param {String} connector\n */\nexport function textualizeStringArray(array, connector = \"and\") {\n    let str = \"\"\n    if (array.length == 1) {\n        return array[0]\n    }\n    if (array.length == 2) {\n        return array.join(` ${connector} `)\n    }\n    array.forEach((item, i) => {\n        str += item\n        if (i < array.length - 1) {\n            if (i == array.length - 2) {\n                str += `, ${connector} `\n            } else {\n                str += \", \"\n            }\n        }\n    })\n    return str\n}\n\nexport function number2ordinal(number) {\n    var special = [\n        \"zeroth\",\n        \"first\",\n        \"second\",\n        \"third\",\n        \"fourth\",\n        \"fifth\",\n        \"sixth\",\n        \"seventh\",\n        \"eighth\",\n        \"ninth\",\n        \"tenth\",\n        \"eleventh\",\n        \"twelfth\",\n        \"thirteenth\",\n        \"fourteenth\",\n        \"fifteenth\",\n        \"sixteenth\",\n        \"seventeenth\",\n        \"eighteenth\",\n        \"nineteenth\",\n    ]\n    var deca = [\n        \"twent\",\n        \"thirt\",\n        \"fort\",\n        \"fift\",\n        \"sixt\",\n        \"sevent\",\n        \"eight\",\n        \"ninet\",\n    ]\n\n    function stringifyNumber(n) {\n        if (n < 20) return special[n]\n        if (n % 10 === 0) return deca[Math.floor(n / 10) - 2] + \"ieth\"\n        return deca[Math.floor(n / 10) - 2] + \"y-\" + special[n % 10]\n    }\n\n    // TEST LOOP SHOWING RESULTS\n    return stringifyNumber(number)\n}\n\nexport function swtichFirstWord(str) {\n    if (str[0].toUpperCase() == str[0]) {\n        return str[0].toLowerCase() + str.substring(1)\n    } else {\n        return str[0].toUpperCase() + str.substring(1)\n    }\n}\n\nexport function svgToArray(svg) {\n    const arr = []\n    object.dfs(svg, (ele) => {\n        if (BASIC_SVG_ELEMENTS.has(ele.tagName)) {\n            arr.push(ele)\n        }\n    })\n    return arr\n}\n","import { useEffect, useRef, useState } from \"react\"\nimport { linkConditionDescription } from \"../descriptions/descriptions\"\nimport * as d3 from \"d3\"\nimport { Header } from \"../components/Header\"\nimport \"./visualizationPanel.css\"\nimport { object } from \"../descriptor/utils\"\n\nconst entityType2dataKey = {\n    node: \"nodes\",\n    link: \"links\",\n}\nconst TOOLTIP_WIDTH = 400\n\nconst DEFAULT_ELEMENT_WIDTH = 50\n\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0\n}\n\nfunction processFloat(x) {\n    if (isFloat(x)) {\n        return x.toFixed(2)\n    }\n    return x\n}\n\nfunction getEncodings(label2attr2diff, label, element) {\n    const res = {}\n    Object.keys(label2attr2diff).forEach((l) => {\n        if (label && label in label2attr2diff && label != l) return\n        const attrs = label2attr2diff[l]\n        Object.keys(attrs).forEach((attr) => {\n            if (\"style\" in attrs[attr]) {\n                const styles = Object.keys(attrs[attr].style)\n                res[attr] = styles\n                    .map((style) => {\n                        // TODO: 处理cx.circle的情况\n                        if (style.indexOf(\".\")) {\n                            style = style.split(\".\")[0]\n                        }\n                        if (style === \"cx\" && !element.hasAttribute(style)) {\n                            return \"x\"\n                        } else if (\n                            style === \"cy\" &&\n                            !element.hasAttribute(style)\n                        ) {\n                            return \"y\"\n                        }\n                        return style\n                    })\n                    .filter((style) => {\n                        // TODO: 对于rect的特判\n                        if (\n                            style === \"x\" ||\n                            style === \"y\" ||\n                            style === \"textContent\"\n                        ) {\n                            return true\n                        }\n                        return element.hasAttribute(style)\n                    })\n            } else if (\"tagName\" in attrs[attr]) {\n                res[attr] = [\"tagName\"]\n            } else {\n                // TODO: 其它情况\n            }\n        })\n    })\n\n    return res\n}\n\nfunction getLayoutEncodings(layoutDescriptions) {\n    const res = {\n        isTopo: false,\n        encodings: [],\n        elements: new Set(),\n    }\n    for (const desc of layoutDescriptions) {\n        if (desc.parameters.length === 0) {\n            res.isTopo = true\n            desc.elements.forEach((el) => {\n                res.elements.add(el)\n            })\n        } else {\n            const encoding = {\n                key: desc.parameters[0].value,\n                value: desc.parameters[1].value,\n            }\n            res.encodings.push(encoding)\n            // TODO: always single children?\n            desc.children[0].elements.forEach((el) => {\n                res.elements.add(el)\n            })\n        }\n    }\n\n    return res\n}\n\nfunction VisualizationGivenDataPanel({\n    dataFolder,\n    style,\n    svg,\n    dataStr,\n    elementInfo,\n    layoutDescriptions,\n    label2Encodings,\n    linkConditions,\n    entityElementsGroups,\n    visibleElements,\n    nodeMeanings,\n    switchedOn,\n}) {\n    const ref = useRef()\n\n    const [info, setInfo] = useState(null)\n    const [element, setElement] = useState(null)\n    const [encodings, setEncodings] = useState(null)\n    const [tooltipVisible, setToolTipVisible] = useState(false)\n    const [tooltipTop, setToolTipTop] = useState(0)\n    const [tooltipLeft, setToolTipLeft] = useState(0)\n    const [data, setData] = useState(null)\n\n    useEffect(() => {\n        if (!svg || !dataStr) return\n        const data = JSON.parse(dataStr)\n        setData(data)\n\n        ref.current.innerHTML = \"\"\n        if (svg) {\n            ref.current.appendChild(svg)\n            if (switchedOn) {\n                d3.select(svg)\n                    .on(\"mouseover\", function (e) {\n                        const el = e.target\n                        if (el.hasAttribute(\"idx\")) {\n                            const idx = parseInt(el.getAttribute(\"idx\"))\n                            const info = elementInfo[idx]\n                            if (info) {\n                                setInfo(info)\n                                setElement(el)\n                                setEncodings(\n                                    getEncodings(\n                                        label2Encodings[info.entityType],\n                                        info.label,\n                                        el\n                                    )\n                                )\n                                setToolTipVisible(true)\n                            }\n\n                            visibleElements.forEach((e) => {\n                                d3.select(e).attr(\"opacity\", 0.1)\n                            })\n                            d3.select(el).attr(\"opacity\", 1)\n                        }\n                    })\n                    .on(\"mousemove\", function (e) {\n                        const el = e.target\n                        if (el.hasAttribute(\"idx\")) {\n                            const [x, y] = d3.pointer(\n                                e,\n                                d3.select(document.body)\n                            )\n                            // setToolTipLeft(x - TOOLTIP_WIDTH / 2);\n                            // setToolTipTop(y - TOOLTIP_HEIGHT + 50);\n                            setToolTipLeft(x)\n                            setToolTipTop(y)\n                        }\n                    })\n                    .on(\"mouseout\", function (e) {\n                        const el = e.target\n                        if (el.hasAttribute(\"idx\")) {\n                            setToolTipVisible(false)\n                        }\n                        visibleElements.forEach((e) => {\n                            d3.select(e).attr(\"opacity\", 1)\n                        })\n                    })\n            }\n        }\n    }, [\n        svg,\n        elementInfo,\n        dataStr,\n        label2Encodings,\n        switchedOn,\n        visibleElements,\n    ])\n\n    return (\n        <div style={style}>\n            <Header title=\"Node-Link Diagram\" />\n            <div\n                style={{\n                    marginTop: 10,\n                    // borderLeft: \"1px solid gray\",\n                }}\n                ref={ref}\n            >\n                <Tooltip\n                    dataFolder={dataFolder}\n                    data={data}\n                    info={info}\n                    layoutDescriptions={layoutDescriptions}\n                    element={element}\n                    encodings={encodings}\n                    visible={tooltipVisible}\n                    top={tooltipTop}\n                    left={tooltipLeft}\n                    linkConditions={linkConditions}\n                    entityElementsGroups={entityElementsGroups}\n                    nodeMeanings={nodeMeanings}\n                />\n            </div>\n        </div>\n    )\n}\n\nfunction Tooltip({\n    dataFolder,\n    data,\n    info,\n    layoutDescriptions,\n    element,\n    visible,\n    top,\n    left,\n    encodings,\n    linkConditions,\n    entityElementsGroups,\n    nodeMeanings,\n}) {\n    useEffect(() => {\n        const tooltip = document.getElementById(\"vis-tooltip\")\n        if (tooltip) {\n            const { top } = tooltip.getBoundingClientRect()\n            if (top < 40) {\n                tooltip.style.transform = `translate(-50%, 50px)`\n            }\n        }\n    })\n\n    if (!info || !visible) return null\n    const term = data[entityType2dataKey[info.entityType]][info.entityIndex]\n    const excludeKeys = new Set([\"id\", \"source\", \"target\"])\n\n    // let newElement = null\n    // if (element) {\n    //     newElement = element.cloneNode(true)\n    //     if (newElement.tagName === \"circle\") {\n    //         const r = newElement.getAttribute(\"r\")\n    //         newElement.setAttribute(\"cx\", 0)\n    //         newElement.setAttribute(\"cy\", 0)\n    //     } else if (newElement.tagName === \"rect\") {\n    //         const width = newElement.getAttribute(\"width\")\n    //         const height = newElement.getAttribute(\"height\")\n    //         newElement.setAttribute(\"x\", -width / 2)\n    //         newElement.setAttribute(\"y\", -height / 2)\n    //     } else {\n    //         // TODO: 其它的暂不支持\n    //         newElement = null\n    //     }\n    // }\n\n    const maxBBox = entityElementsGroups[info.entityType].maxBBox\n    const LEGENDS_ELEMENT_WIDTH = Math.min(\n        DEFAULT_ELEMENT_WIDTH,\n        Math.max(maxBBox.width, maxBBox.height)\n    )\n    const k = LEGENDS_ELEMENT_WIDTH / Math.max(maxBBox.width, maxBBox.height)\n    const bbox = entityElementsGroups[info.entityType][info.entityIndex].bbox\n    const newElement =\n        entityElementsGroups[info.entityType][info.entityIndex].group.cloneNode(\n            true\n        )\n    d3.select(newElement).attr(\n        \"transform\",\n        `scale(${k})translate(-${bbox.x + bbox.width / 2}, -${\n            bbox.y + bbox.height / 2\n        })`\n    )\n    const idx = parseInt(element.getAttribute(\"idx\"))\n    if (!isNaN(idx)) {\n        object.dfs(newElement, (el) => {\n            const _idx = parseInt(el.getAttribute(\"idx\"))\n            if (!isNaN(_idx) && _idx !== idx) {\n                el.setAttribute(\"opacity\", \"20%\")\n            }\n        })\n    }\n\n    const linkDescription = linkConditionDescription(linkConditions)\n\n    const layoutEncodings = getLayoutEncodings(layoutDescriptions)\n\n    return (\n        <div\n            id=\"vis-tooltip\"\n            className=\"svg-tooltip\"\n            style={{\n                padding: 10,\n                position: \"absolute\",\n                transform: `translate(-50%, -100%)`,\n                width: `${TOOLTIP_WIDTH}px`,\n                left: left,\n                top: top,\n                visibility: visible,\n                fontFamily: \"Consolas, Menlo, monospace\",\n            }}\n        >\n            {/* {JSON.stringify(info)} */}\n            <div\n                style={{\n                    fontSize: \"24px\",\n                    fontWeight: \"bolder\",\n                    fontFamily: \"Times\",\n                }}\n            >\n                Meanings\n            </div>\n            {info.entityType === \"link\" ? (\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: `<span class=\"description-parameter entity-parameter\">Link</span>: ${linkDescription}`,\n                    }}\n                ></div>\n            ) : (\n                <div\n                    dangerouslySetInnerHTML={{\n                        __html: `<span class=\"description-parameter entity-parameter\">Node</span>: ${nodeMeanings}.`,\n                    }}\n                ></div>\n            )}\n            <div\n                style={{\n                    fontSize: \"24px\",\n                    fontWeight: \"bolder\",\n                    fontFamily: \"Times\",\n                }}\n            >\n                Attributes\n            </div>\n            {Object.keys(term).map((k) => {\n                if (excludeKeys.has(k)) return null\n                const val = term[k]\n                return (\n                    <div key={k}>\n                        <span className=\"tooltip-attr\">{k}</span>:\n                        {Array.isArray(val) ? (\n                            <span>[{val.join(\",\")}]</span>\n                        ) : typeof val === \"object\" ? (\n                            <div\n                                style={{\n                                    marginLeft: 10,\n                                }}\n                            >\n                                {Object.keys(val).map((k) => {\n                                    return (\n                                        <div key={k}>\n                                            <span className=\"tooltip-attr\">\n                                                {k}\n                                            </span>\n                                            : {val[k]}\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        ) : (\n                            ` ${isFloat(val) ? val.toFixed(2) : val}`\n                        )}\n                    </div>\n                )\n            })}\n\n            <div\n                style={{\n                    fontSize: \"24px\",\n                    fontWeight: \"bolder\",\n                    fontFamily: \"Times\",\n                }}\n            >\n                Encodings\n            </div>\n            <div>\n                {encodings &&\n                    Object.keys(encodings).map((attr, k) => {\n                        return (\n                            <div key={k}>\n                                {\n                                    // 暂时不要了\n                                    // false &&\n                                    newElement && (\n                                        <svg\n                                            width={LEGENDS_ELEMENT_WIDTH}\n                                            height={LEGENDS_ELEMENT_WIDTH}\n                                            style={{\n                                                verticalAlign: \"middle\",\n                                            }}\n                                            viewBox={`-${\n                                                LEGENDS_ELEMENT_WIDTH / 2\n                                            } -${\n                                                LEGENDS_ELEMENT_WIDTH / 2\n                                            } ${LEGENDS_ELEMENT_WIDTH} ${LEGENDS_ELEMENT_WIDTH}`}\n                                            dangerouslySetInnerHTML={{\n                                                __html: new XMLSerializer().serializeToString(\n                                                    newElement\n                                                ),\n                                            }}\n                                        ></svg>\n                                    )\n                                }\n\n                                {encodings[attr].map((style) => {\n                                    return (\n                                        <span className=\"tooltip-attr\">\n                                            {style}\n                                        </span>\n                                    )\n                                })}\n                                <span> → </span>\n                                <span className=\"tooltip-attr\">\n                                    {attr.indexOf(\"@\") !== -1\n                                        ? `${attr.split(\"@\")[0]}[${\n                                              attr.split(\"@\")[1]\n                                          }]`\n                                        : attr}\n                                </span>\n                                <span>: </span>\n                                {\n                                    // TODO: 可能考虑不全面\n                                    processFloat(\n                                        attr.indexOf(\"@\") !== -1\n                                            ? term[attr.split(\"@\")[0]][\n                                                  attr.split(\"@\")[1]\n                                              ]\n                                            : term[attr]\n                                    )\n                                }\n                            </div>\n                        )\n                    })}\n            </div>\n            {layoutEncodings.elements.has(element) && (\n                <div>\n                    <div\n                        style={{\n                            fontSize: \"24px\",\n                            fontWeight: \"bolder\",\n                            fontFamily: \"Times\",\n                        }}\n                    >\n                        Layout\n                    </div>\n                    <div>\n                        {layoutEncodings.isTopo && (\n                            <p>\n                                The layout is a topology-based layout. The\n                                farther the geodesic distance (the length of the\n                                shortest path) between two nodes, the farther\n                                the Euclidean distance between them.\n                            </p>\n                        )}\n                        {layoutEncodings.encodings.map((encoding) => {\n                            return (\n                                <div>\n                                    <img\n                                        alt={`data/${dataFolder}/layout-indicator.svg`}\n                                        width={35}\n                                        height={35}\n                                        src={`data/${dataFolder}/layout-indicator.svg`}\n                                    ></img>\n                                    <span className=\"tooltip-attr\">\n                                        {encoding.key}\n                                    </span>\n                                    <span> → </span>\n                                    {encoding.value.map((attr) => {\n                                        return (\n                                            <span className=\"tooltip-attr\">\n                                                {attr.indexOf(\"@\") !== -1\n                                                    ? `${attr.split(\"@\")[0]}[${\n                                                          attr.split(\"@\")[1]\n                                                      }]`\n                                                    : attr}\n                                            </span>\n                                        )\n                                    })}\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport { VisualizationGivenDataPanel }\n","export function Loader({ style = {}, state = \"\" }) {\n    return (\n        <div\n            style={{\n                color: \"\",\n                fontFamily: \"Times\",\n                ...style,\n            }}\n        >\n            {state}&nbsp;&nbsp;\n            <div\n                className=\"loader-inner ball-pulse\"\n                style={{\n                    display: \"inline-block\",\n                }}\n            >\n                <div\n                    style={{\n                        background: \"black\",\n                    }}\n                ></div>\n                <div\n                    style={{\n                        background: \"black\",\n                    }}\n                ></div>\n                <div\n                    style={{\n                        background: \"black\",\n                    }}\n                ></div>\n            </div>\n        </div>\n    )\n}\n","import colorRGBA from 'color-rgba'\n\nconst colorTable = [{ \"name\": \"black\", \"vec\": [0, 0, 0] }, { \"name\": \"silver\", \"vec\": [192, 192, 192] }, { \"name\": \"grey\", \"vec\": [128, 128, 128] }, { \"name\": \"white\", \"vec\": [255, 255, 255] }, { \"name\": \"maroon\", \"vec\": [128, 0, 0] }, { \"name\": \"red\", \"vec\": [255, 0, 0] }, { \"name\": \"purple\", \"vec\": [128, 0, 128] }, { \"name\": \"fuchsia\", \"vec\": [255, 0, 255] }, { \"name\": \"green\", \"vec\": [0, 128, 0] }, { \"name\": \"lime\", \"vec\": [0, 255, 0] }, { \"name\": \"olive\", \"vec\": [128, 128, 0] }, { \"name\": \"yellow\", \"vec\": [255, 255, 0] }, { \"name\": \"navy\", \"vec\": [0, 0, 128] }, { \"name\": \"blue\", \"vec\": [0, 0, 255] }, { \"name\": \"teal\", \"vec\": [0, 128, 128] }, { \"name\": \"aqua\", \"vec\": [0, 255, 255] }, { \"name\": \"orange\", \"vec\": [255, 165, 0] }, { \"name\": \"aliceblue\", \"vec\": [240, 248, 255] }, { \"name\": \"antiquewhite\", \"vec\": [250, 235, 215] }, { \"name\": \"aquamarine\", \"vec\": [127, 255, 212] }, { \"name\": \"azure\", \"vec\": [240, 255, 255] }, { \"name\": \"beige\", \"vec\": [245, 245, 220] }, { \"name\": \"blanchedalmond\", \"vec\": [255, 228, 196] }, { \"name\": \"blueviolet\", \"vec\": [138, 43, 226] }, { \"name\": \"brown\", \"vec\": [165, 42, 42] }, { \"name\": \"burlywood\", \"vec\": [222, 184, 135] }, { \"name\": \"cadetblue\", \"vec\": [95, 158, 160] }, { \"name\": \"chartreuse\", \"vec\": [127, 255, 0] }, { \"name\": \"chocolate\", \"vec\": [210, 105, 30] }, { \"name\": \"coral\", \"vec\": [255, 127, 80] }, { \"name\": \"cornflowerblue\", \"vec\": [100, 149, 237] }, { \"name\": \"cornsilk\", \"vec\": [255, 248, 220] }, { \"name\": \"crimson\", \"vec\": [220, 20, 60] }, { \"name\": \"darkblue\", \"vec\": [0, 0, 139] }, { \"name\": \"darkcyan\", \"vec\": [0, 139, 139] }, { \"name\": \"darkgoldenrod\", \"vec\": [184, 134, 11] }, { \"name\": \"darkgrey\", \"vec\": [169, 169, 169] }, { \"name\": \"darkgreen\", \"vec\": [0, 100, 0] }, { \"name\": \"darkkhaki\", \"vec\": [189, 183, 107] }, { \"name\": \"darkmagenta\", \"vec\": [139, 0, 139] }, { \"name\": \"darkolivegreen\", \"vec\": [85, 107, 47] }, { \"name\": \"darkorange\", \"vec\": [255, 140, 0] }, { \"name\": \"darkorchid\", \"vec\": [153, 50, 204] }, { \"name\": \"darkred\", \"vec\": [139, 0, 0] }, { \"name\": \"darksalmon\", \"vec\": [233, 150, 122] }, { \"name\": \"darkseagreen\", \"vec\": [143, 188, 143] }, { \"name\": \"darkslateblue\", \"vec\": [72, 61, 139] }, { \"name\": \"darkslategrey\", \"vec\": [47, 79, 79] }, { \"name\": \"darkturquoise\", \"vec\": [0, 206, 209] }, { \"name\": \"darkviolet\", \"vec\": [148, 0, 211] }, { \"name\": \"deeppink\", \"vec\": [255, 20, 147] }, { \"name\": \"deepskyblue\", \"vec\": [0, 191, 255] }, { \"name\": \"dimgrey\", \"vec\": [105, 105, 105] }, { \"name\": \"dodgerblue\", \"vec\": [30, 144, 255] }, { \"name\": \"firebrick\", \"vec\": [178, 34, 34] }, { \"name\": \"floralwhite\", \"vec\": [255, 250, 240] }, { \"name\": \"forestgreen\", \"vec\": [34, 139, 34] }, { \"name\": \"gainsboro\", \"vec\": [220, 220, 220] }, { \"name\": \"ghostwhite\", \"vec\": [248, 248, 255] }, { \"name\": \"gold\", \"vec\": [255, 215, 0] }, { \"name\": \"goldenrod\", \"vec\": [218, 165, 32] }, { \"name\": \"greenyellow\", \"vec\": [173, 255, 47] }, { \"name\": \"honeydew\", \"vec\": [240, 255, 240] }, { \"name\": \"hotpink\", \"vec\": [255, 105, 180] }, { \"name\": \"indianred\", \"vec\": [205, 92, 92] }, { \"name\": \"indigo\", \"vec\": [75, 0, 130] }, { \"name\": \"ivory\", \"vec\": [255, 255, 240] }, { \"name\": \"khaki\", \"vec\": [240, 230, 140] }, { \"name\": \"lavender\", \"vec\": [230, 230, 250] }, { \"name\": \"lavenderblush\", \"vec\": [255, 240, 245] }, { \"name\": \"lawngreen\", \"vec\": [124, 252, 0] }, { \"name\": \"lemonchiffon\", \"vec\": [255, 250, 205] }, { \"name\": \"lightblue\", \"vec\": [173, 216, 230] }, { \"name\": \"lightcoral\", \"vec\": [240, 128, 128] }, { \"name\": \"lightcyan\", \"vec\": [224, 255, 255] }, { \"name\": \"lightgoldenrodyellow\", \"vec\": [250, 250, 210] }, { \"name\": \"lightgrey\", \"vec\": [211, 211, 211] }, { \"name\": \"lightgreen\", \"vec\": [144, 238, 144] }, { \"name\": \"lightpink\", \"vec\": [255, 182, 193] }, { \"name\": \"lightsalmon\", \"vec\": [255, 160, 122] }, { \"name\": \"lightseagreen\", \"vec\": [32, 178, 170] }, { \"name\": \"lightskyblue\", \"vec\": [135, 206, 250] }, { \"name\": \"lightslategrey\", \"vec\": [119, 136, 153] }, { \"name\": \"lightsteelblue\", \"vec\": [176, 196, 222] }, { \"name\": \"lightyellow\", \"vec\": [255, 255, 224] }, { \"name\": \"limegreen\", \"vec\": [50, 205, 50] }, { \"name\": \"linen\", \"vec\": [250, 240, 230] }, { \"name\": \"mediumaquamarine\", \"vec\": [102, 205, 170] }, { \"name\": \"mediumblue\", \"vec\": [0, 0, 205] }, { \"name\": \"mediumorchid\", \"vec\": [186, 85, 211] }, { \"name\": \"mediumpurple\", \"vec\": [147, 112, 219] }, { \"name\": \"mediumseagreen\", \"vec\": [60, 179, 113] }, { \"name\": \"mediumslateblue\", \"vec\": [123, 104, 238] }, { \"name\": \"mediumspringgreen\", \"vec\": [0, 250, 154] }, { \"name\": \"mediumturquoise\", \"vec\": [72, 209, 204] }, { \"name\": \"mediumvioletred\", \"vec\": [199, 21, 133] }, { \"name\": \"midnightblue\", \"vec\": [25, 25, 112] }, { \"name\": \"mintcream\", \"vec\": [245, 255, 250] }, { \"name\": \"mistyrose\", \"vec\": [255, 228, 225] }, { \"name\": \"moccasin\", \"vec\": [255, 228, 181] }, { \"name\": \"navajowhite\", \"vec\": [255, 222, 173] }, { \"name\": \"oldlace\", \"vec\": [253, 245, 230] }, { \"name\": \"olivedrab\", \"vec\": [107, 142, 35] }, { \"name\": \"orangered\", \"vec\": [255, 69, 0] }, { \"name\": \"orchid\", \"vec\": [218, 112, 214] }, { \"name\": \"palegoldenrod\", \"vec\": [238, 232, 170] }, { \"name\": \"palegreen\", \"vec\": [152, 251, 152] }, { \"name\": \"paleturquoise\", \"vec\": [175, 238, 238] }, { \"name\": \"palevioletred\", \"vec\": [219, 112, 147] }, { \"name\": \"papayawhip\", \"vec\": [255, 239, 213] }, { \"name\": \"peachpuff\", \"vec\": [255, 218, 185] }, { \"name\": \"peru\", \"vec\": [205, 133, 63] }, { \"name\": \"pink\", \"vec\": [255, 192, 203] }, { \"name\": \"plum\", \"vec\": [221, 160, 221] }, { \"name\": \"powderblue\", \"vec\": [176, 224, 230] }, { \"name\": \"rosybrown\", \"vec\": [188, 143, 143] }, { \"name\": \"royalblue\", \"vec\": [65, 105, 225] }, { \"name\": \"saddlebrown\", \"vec\": [139, 69, 19] }, { \"name\": \"salmon\", \"vec\": [250, 128, 114] }, { \"name\": \"sandybrown\", \"vec\": [244, 164, 96] }, { \"name\": \"seagreen\", \"vec\": [46, 139, 87] }, { \"name\": \"seashell\", \"vec\": [255, 245, 238] }, { \"name\": \"sienna\", \"vec\": [160, 82, 45] }, { \"name\": \"skyblue\", \"vec\": [135, 206, 235] }, { \"name\": \"slateblue\", \"vec\": [106, 90, 205] }, { \"name\": \"slategrey\", \"vec\": [112, 128, 144] }, { \"name\": \"snow\", \"vec\": [255, 250, 250] }, { \"name\": \"springgreen\", \"vec\": [0, 255, 127] }, { \"name\": \"steelblue\", \"vec\": [70, 130, 180] }, { \"name\": \"tan\", \"vec\": [210, 180, 140] }, { \"name\": \"thistle\", \"vec\": [216, 191, 216] }, { \"name\": \"tomato\", \"vec\": [255, 99, 71] }, { \"name\": \"turquoise\", \"vec\": [64, 224, 208] }, { \"name\": \"violet\", \"vec\": [238, 130, 238] }, { \"name\": \"wheat\", \"vec\": [245, 222, 179] }, { \"name\": \"whitesmoke\", \"vec\": [245, 245, 245] }, { \"name\": \"yellowgreen\", \"vec\": [154, 205, 50] }, { \"name\": \"rebeccapurple\", \"vec\": [102, 51, 153] }]\n\nfunction findSimiliarColor(color) {\n    const [r, g, b, _] = colorRGBA(color)\n    let minDistance = Number.MAX_VALUE\n    let res = 'black'\n    colorTable.forEach((term) => {\n        const [r_, g_, b_] = term.vec\n        const d = (r - r_) ** 2 + (g - g_) ** 2 + (b - b_) ** 2\n        if (d < minDistance) {\n            minDistance = d\n            res = term.name\n        }\n    })\n\n    return res\n}\n\nexport {\n    findSimiliarColor\n}","import { Tree } from \"antd\"\nimport * as d3 from \"d3\"\nimport { findSimiliarColor } from \"../utils/color\"\nimport { Loader } from \"./Loader\"\n\nfunction DescriptionTerm({ term, visibleElements }) {\n    const styleParameter = (word) => {\n        if (Array.isArray(word)) {\n            return word.map(\n                (_) => `<span class='description-parameter'>${_}</span>`\n            )\n        }\n\n        // 判断是颜色\n        if (/^#(?:[0-9a-fA-F]{3}){1,2}$/.test(word)) {\n            const name = findSimiliarColor(word)\n            return `<span class='description-parameter'>${name}(<span style='color: ${word};'>&#9724;</span>${word})</span>`\n        }\n\n        return `<span class='description-parameter'>${word}</span>`\n    }\n    return (\n        <p\n            style={{\n                margin: 0,\n                padding: 2,\n                fontFamily: \"Times\",\n            }}\n            onMouseOver={(e) => {\n                e.target.style.backgroundColor = \"#e9e9e9\"\n                visibleElements.forEach((e) => {\n                    d3.select(e).attr(\"opacity\", 0.1)\n                })\n                term.elements.forEach((e) => {\n                    d3.select(e).attr(\"opacity\", 1)\n                })\n            }}\n            onMouseLeave={(e) => {\n                e.target.style.backgroundColor = \"#fff\"\n                visibleElements.forEach((e) => {\n                    d3.select(e).attr(\"opacity\", 1)\n                })\n            }}\n            dangerouslySetInnerHTML={{\n                __html: term.content\n                // __html: term.template(\n                //     ...term.parameters.map(\n                //         styleParameter\n                //     )\n                // ),\n            }}\n        ></p>\n    )\n}\n\nfunction getTreeData(graphDescriptions, visibleElements, defaultExpandNodes, parentKey = '') {\n    const res = []\n    graphDescriptions.forEach((term, i) => {\n        const key = `${parentKey}-${i}`\n        if (term.switch) {\n            defaultExpandNodes.push(key)\n        }\n        res.push({\n            title: <DescriptionTerm visibleElements={visibleElements} term={term} />,\n            key: key,\n            children: (Array.isArray(term.children) && term.children.length > 0) ? getTreeData(term.children, visibleElements, defaultExpandNodes, key) : null\n        })\n    })\n    return res\n}\n\nfunction TreeDescription({ graphDescriptions, visibleElements }) {\n    let treeData = []\n    const defaultExpandNodes = []\n    if (graphDescriptions && graphDescriptions.length) {\n        treeData = getTreeData(graphDescriptions, visibleElements, defaultExpandNodes)\n    }\n    return <Tree\n        selectable={false}\n        treeData={treeData}\n        defaultExpandNodes={defaultExpandNodes}\n    />\n}\n\nexport function Descriptions({ graphDescriptions, visibleElements, loadingText, loading }) {\n\n    let treeData = []\n    const defaultExpandNodes = []\n    if (!loading && graphDescriptions && graphDescriptions.length) {\n        treeData = getTreeData(graphDescriptions, visibleElements, defaultExpandNodes)\n    }\n\n    return (\n        <div style={{\n            margin: 20,\n            marginLeft: 30,\n        }}>\n            { !loading && graphDescriptions && graphDescriptions.length ? (\n                <Tree\n                    style={{\n                        fontSize: 18,\n                    }}\n                    selectable={false}\n                    treeData={treeData}\n                    defaultExpandedKeys={defaultExpandNodes}\n                />\n                // graphDescriptions.map((term, i) => {\n                //     return <DescriptionTerm\n                //         visibleElements={visibleElements}\n                //         term={term}\n                //     />\n                // })\n            ) : (\n                <Loader\n                    style={{\n                        margin: 20,\n                        marginLeft: 28,\n                        padding: 2,\n                        fontFamily: \"Times\",\n                    }}\n                    state={loadingText}\n                ></Loader>\n            )}\n        </div>\n    )\n}","import { Header } from \"../components/Header\"\nimport { linkConditionDescription } from \"../descriptions/descriptions\"\nimport \"./descriptionPanel.css\"\nimport { Loader } from \"../components/Loader\"\nimport { Descriptions } from \"../components/Descriptions\"\nimport { Divider } from \"antd\"\n\nfunction DescriptionPanel({\n    style,\n    linkConditions,\n    graphDescriptions,\n    layoutDescriptions,\n    visibleElements,\n    loading,\n    nodeMeanings,\n    switchedOn,\n}) {\n    const linkDescription = linkConditionDescription(linkConditions)\n\n    return (\n        <div\n            style={{\n                ...style,\n                margin: 5,\n                display: `${switchedOn ? \"flex\" : \"none\"}`,\n                flexDirection: \"column\",\n            }}\n        >\n            <Header title=\"Descriptions\" />\n\n            <div\n                style={{\n                    // borderLeft: \"1px solid gray\",\n                    fontSize: 18,\n                    paddingLeft: 10,\n                }}\n            >\n                <Divider\n                    orientation=\"left\"\n                    style={{\n                        fontSize: 20,\n                        fontFamily: \"Times\",\n                    }}\n                >\n                    Node & Link Meanings\n                </Divider>\n\n                {!loading ? (\n                    <div>\n                        <div\n                            style={{\n                                margin: 20,\n                                marginLeft: 30,\n                                padding: 2,\n                                fontFamily: \"Times\",\n                            }}\n                            dangerouslySetInnerHTML={{\n                                __html: `<span class=\"description-parameter entity-parameter\">Node</span>: Nodes represent ${nodeMeanings}.`,\n                            }}\n                        ></div>\n                        <div\n                            style={{\n                                margin: 20,\n                                marginLeft: 30,\n                                padding: 2,\n                                fontFamily: \"Times\",\n                            }}\n                            dangerouslySetInnerHTML={{\n                                __html: `<span class=\"description-parameter entity-parameter\">Link</span>: ${linkDescription}`,\n                            }}\n                        ></div>\n                    </div>\n                ) : (\n                    <Loader\n                        style={{\n                            margin: 20,\n                            marginLeft: 58,\n                            padding: 2,\n                            fontFamily: \"Times\",\n                        }}\n                        state={\"Computing Linking Condition\"}\n                    ></Loader>\n                )}\n\n                <Divider\n                    orientation=\"left\"\n                    style={{\n                        fontSize: 20,\n                        fontFamily: \"Times\",\n                    }}\n                >\n                    Visual Encoding\n                </Divider>\n\n                <Descriptions\n                    loading={loading}\n                    graphDescriptions={graphDescriptions}\n                    visibleElements={visibleElements}\n                    loadingText={\"Computing Visual Encoding\"}\n                />\n                <Divider\n                    orientation=\"left\"\n                    style={{\n                        fontSize: 20,\n                        fontFamily: \"Times\",\n                    }}\n                >\n                    Layout Types\n                </Divider>\n\n                <Descriptions\n                    loading={loading}\n                    graphDescriptions={layoutDescriptions}\n                    visibleElements={visibleElements}\n                    loadingText={\"Computing Layout Meaning\"}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport { DescriptionPanel }\n","const demos = {\n    miserables: {\n        data: \"miserables/miserables_5.json\",\n        code: \"miserables/code.js\",\n    },\n    nodeEncoding: {\n        data: \"nodeEncoding/data.json\",\n        code: \"nodeEncoding/code.js\",\n    },\n    \"imdb-movies\": {\n        data: \"imdb-movies-raw/data.json\",\n        code: \"imdb-movies-raw/code.js\",\n        preload: \"imdb-movies-raw/preload.json\",\n        // data: \"imdb-movies/data.json\",\n        // code: \"imdb-movies/code.js\",\n        // preload: \"imdb-movies/preload.json\"\n    },\n    \"imdb-actors\": {\n        data: \"imdb-actors-raw/data.json\",\n        code: \"imdb-actors-raw/code.js\",\n        preload: \"imdb-actors-raw/preload.json\",\n        // data: \"imdb-actors/data.json\",\n        // code: \"imdb-actors/code.js\",\n        // preload: \"imdb-actors/preload.json\"\n    },\n    \"imdb-movies-link\": {\n        data: \"imdb-movies-link/data.json\",\n        code: \"imdb-movies-link/code.js\",\n        preload: \"imdb-movies-link/preload.json\",\n        // data: \"imdb-movies/data.json\",\n        // code: \"imdb-movies/code.js\",\n        // preload: \"imdb-movies/preload.json\"\n    },\n    \"imdb-movies-shapes\": {\n        data: \"imdb-movies-shapes/data.json\",\n        code: \"imdb-movies-shapes/code.js\",\n        preload: \"imdb-movies-shapes/preload.json\",\n        // data: \"imdb-movies/data.json\",\n        // code: \"imdb-movies/code.js\",\n        // preload: \"imdb-movies/preload.json\"\n    },\n}\n\nasync function getPreloadData(demo) {\n    try {\n        // 需要异步优化\n        const dataStr = await fetch(`data/${demos[demo].data}`).then((res) =>\n            res.text()\n        )\n        const codeStr = await fetch(`data/${demos[demo].code}`).then((res) =>\n            res.text()\n        )\n        const preload = await fetch(`data/${demos[demo].preload}`).then((res) =>\n            res.json()\n        )\n\n        return {\n            dataFolder: demos[demo].data.split('/')[0],\n            dataStr,\n            codeStr,\n            preload,\n        }\n    } catch (e) {\n        console.error(e)\n        return {\n            dataStr: \"\",\n            codeStr: \"\",\n            preload: null,\n        }\n    }\n}\n\nexport { getPreloadData }\n","const getNumericalStats = (data, attr) => {\n    const arr = data.nodes.map(n => n[attr])\n    arr.sort((a, b) => a - b)\n    return {\n        min: arr[0],\n        max: arr[arr.length - 1],\n        q1: arr[parseInt(arr.length * 0.25)],\n        q3: arr[parseInt(arr.length * 0.75)],\n    }\n}\n\nfunction extractAttributes(data) {\n    const res = []\n    for (const [k, v] of Object.entries(data.nodes[0])) {\n        if (typeof v === 'number') {\n            res.push({\n                name: k,\n                type: 'numerical'\n            })\n        } else if (typeof v === 'string') {\n            res.push({\n                name: k,\n                type: 'categorical'\n            })\n        } else if (Array.isArray(v)) {\n            res.push({\n                name: k,\n                type: 'list'\n            })\n        }\n    }\n\n    res.forEach(attr => {\n        if (attr.type === 'numerical') {\n            const { min, max, q1, q3 } = getNumericalStats(data, attr.name)\n            attr.min = min\n            attr.max = max\n            attr.q1 = q1\n            attr.q3 = q3\n        }\n    })\n\n    return res\n}\n\nexport {\n    extractAttributes\n}","const THRESHOLD = 0.3 // TODO: threshold value\n\nconst getNormalizedDifference = (val1, val2, attribute) => {\n    return val1 === val2\n        ? 0\n        : Math.abs(val1 - val2) / (attribute.max - attribute.min)\n}\n\nconst intersectList = (l1, l2) => {\n    return l1.filter((x) => l2.includes(x)).sort()\n}\n\nconst powerSet = (array) => {\n    // O(2^n)\n    const results = [[]]\n    for (const value of array) {\n        const copy = [...results] // See note below.\n        for (const prefix of copy) {\n            results.push(prefix.concat(value))\n        }\n    }\n    return results\n}\n\nfunction generateLinkingConditions(node1, node2, attributes) {\n    const res = {}\n    attributes.forEach((attr) => {\n        res[attr.name] = {}\n        const val1 = node1[attr.name]\n        const val2 = node2[attr.name]\n        if (val1 === undefined || val2 === undefined) {\n            delete res[attr.name]\n            return\n        }\n        if (attr.type === \"categorical\") {\n            if (val1 === val2) {\n                res[attr.name][\"common\"] = res[attr.name][\"common\"] || {}\n                res[attr.name][\"common\"][val1] = 1\n                res[attr.name][\"common\"][\"@@any\"] = 1\n            }\n        } else if (attr.type === \"list\") {\n            // list, 遍历所有组合\n            const overlap = intersectList(val1, val2)\n            if (overlap.length === 0) {\n                delete res[attr.name]\n                return\n            }\n            res[attr.name][\"overlap\"] = res[attr.name][\"common\"] || {}\n            res[attr.name][\"overlap\"][\"@@any\"] = 1\n            const combinations = powerSet(overlap)\n            for (const arr of combinations) {\n                const key = arr.join(\"-\")\n                if (key) {\n                    res[attr.name][\"overlap\"][key] = 1\n                }\n            }\n        } else if (attr.type === \"numerical\") {\n            const diff = getNormalizedDifference(val1, val2, attr)\n            if (diff < THRESHOLD) {\n                const rawDiff = Math.abs(val1 - val2)\n                // res[attr.name]['similar'] = res[attr.name]['similar'] || {}\n                // res[attr.name]['similar'][rawDiff] = 1\n                res[attr.name][\"similar\"] = rawDiff\n                if (val1 === val2) {\n                    res[attr.name][\"common\"] = res[attr.name][\"common\"] || {}\n                    res[attr.name][\"common\"][val1] = 1\n                    res[attr.name][\"common\"][\"@@any\"] = 1\n                }\n            }\n\n            // 四位数\n            if (val1 < attr.q1 && val2 < attr.q1) {\n                res[attr.name][\"same-bin\"] = res[attr.name][\"same-bin\"] || {}\n                res[attr.name][\"same-bin\"][\"low\"] = 1\n                res[attr.name][\"same-bin\"][\"@@any\"] = 1\n            } else if (\n                val1 >= attr.q1 &&\n                val1 <= attr.q3 &&\n                val2 >= attr.q1 &&\n                val2 <= attr.q3\n            ) {\n                res[attr.name][\"same-bin\"] = res[attr.name][\"same-bin\"] || {}\n                res[attr.name][\"same-bin\"][\"middle\"] = 1\n                res[attr.name][\"same-bin\"][\"@@any\"] = 1\n            } else if (val1 > attr.q3 && val2 > attr.q3) {\n                res[attr.name][\"same-bin\"] = res[attr.name][\"same-bin\"] || {}\n                res[attr.name][\"same-bin\"][\"high\"] = 1\n                res[attr.name][\"same-bin\"][\"@@any\"] = 1\n            }\n        }\n        if (Object.keys(res[attr.name]).length === 0) {\n            delete res[attr.name]\n        }\n    })\n\n    return res\n}\n\n/**\n * condition: attr-relation-value-cnt\n * @param {*} condition1\n * @param {*} condition2\n */\nfunction unionCondition(condition1, condition2) {\n    const res = Object.assign({}, condition1)\n    for (const attr in condition2) {\n        if (!(attr in res)) {\n            res[attr] = condition2[attr]\n            continue\n        }\n        for (const relation in condition2[attr]) {\n            if (!(relation in res[attr])) {\n                res[attr][relation] = condition2[attr][relation]\n                continue\n            }\n            if (relation === \"similar\") {\n                res[attr][relation] = Math.min(\n                    res[attr][relation],\n                    condition2[attr][relation]\n                )\n            } else {\n                for (const value in condition2[attr][relation]) {\n                    if (!(value in res[attr][relation])) {\n                        res[attr][relation][value] =\n                            condition2[attr][relation][value]\n                    } else {\n                        res[attr][relation][value] +=\n                            condition2[attr][relation][value]\n                    }\n                }\n            }\n        }\n    }\n    return res\n}\n\nfunction accumulateCondition(condition1, condition2) {\n    const res = Object.assign({}, condition1)\n    for (const attr in condition2) {\n        if (!(attr in res)) {\n            res[attr] = condition2[attr]\n            continue\n        }\n        for (const relation in condition2[attr]) {\n            if (!(relation in res[attr])) {\n                res[attr][relation] = condition2[attr][relation]\n                continue\n            }\n            // NOTE: 跟union不一样，会统计频率\n            // if (relation === 'similar') {\n            // res[attr][relation] = Math.min(res[attr][relation], condition2[attr][relation])\n            // } else {\n            for (const value in condition2[attr][relation]) {\n                if (!(value in res[attr][relation])) {\n                    res[attr][relation][value] =\n                        condition2[attr][relation][value]\n                } else {\n                    res[attr][relation][value] +=\n                        condition2[attr][relation][value]\n                }\n            }\n            // }\n        }\n    }\n    return res\n}\n\nfunction excludeCondition(condition1, condition2) {\n    // NOTE: may change condition1, but not condition2\n    const res = Object.assign({}, condition1)\n    for (const attr in condition2) {\n        if (!(attr in res)) {\n            continue\n        }\n        for (const relation in condition2[attr]) {\n            if (!(relation in res[attr])) {\n                continue\n            }\n            if (typeof res[attr][relation] === \"number\") {\n                // NOTE: exclude的时候，不同的处理方式不同\n                if (res[attr][relation] >= condition2[attr][relation]) {\n                    delete res[attr][relation]\n                } else {\n                    res[attr][relation] = { [condition2[attr][relation]]: 1 }\n                }\n            } else {\n                for (const value in condition2[attr][relation]) {\n                    if (value in res[attr][relation]) {\n                        delete res[attr][relation][value]\n                    }\n                }\n                if (Object.keys(res[attr][relation]).length === 0) {\n                    delete res[attr][relation]\n                }\n            }\n        }\n        if (Object.keys(res[attr]).length === 0) {\n            delete res[attr]\n        }\n    }\n    return res\n}\n\nexport {\n    generateLinkingConditions,\n    unionCondition,\n    excludeCondition,\n    accumulateCondition,\n}\n","import { BASIC_SVG_ELEMENTS, COMMON_STYLE_CHANNELS } from \"./global\"\nimport { dom, object } from \"./utils\"\n\nexport class NLDCompDiff {\n    constructor() {\n        this.array = []\n    }\n    isItemEmpty(item) {\n        if (item?.tagName) {\n            // tagName different\n            return false\n        } else {\n            if (item?.style) {\n                if (Object.keys(item.style).length > 0) {\n                    // and something is in item.style\n                    return false\n                }\n            }\n        }\n        return true\n    }\n    isEmpty() {\n        return this.array.every(this.isItemEmpty)\n    }\n    getIndexOfDifferences() {\n        const indexes = []\n        this.array.forEach((item, i) => {\n            if (!this.isItemEmpty(item)) {\n                indexes.push(i)\n            }\n        })\n        return indexes\n    }\n    /**\n     * eliminate unstable channels from difference\n     * only remain stable channels\n     * @param {NLDCompDiff} unstableComponents\n     */\n    eliminate(unstableComponents) {\n        const unstableArray = unstableComponents.array\n        this.array.forEach((item, i) => {\n            const unstableItem = unstableArray[i]\n            if (item.tagName && unstableItem.tagName) {\n                delete item.tagName\n            }\n            if (item.style) {\n                for (let channel in item.style) {\n                    if (unstableItem.style && unstableItem.style[channel]) {\n                        delete item.style[channel]\n                    }\n                }\n            }\n        })\n    }\n}\n\nexport class NLDComponents {\n    // node link diagram components\n    constructor(svg) {\n        if (svg) {\n            this.osvg = svg // origin svg\n\n            // compute style\n            // document.body.appendChild(svg)\n\n            const basicElementArray = []\n            object.dfs(svg, function (element) {\n                // compute styles (include tagName), only keep basic\n                if (BASIC_SVG_ELEMENTS.has(element.tagName)) {\n                    const style = dom.getComputedStyle(element)\n                    basicElementArray.push({\n                        tagName: element.tagName,\n                        element,\n                        style,\n                    })\n                }\n            })\n            this.basicElementArray = basicElementArray\n\n            // document.body.removeChild(svg)\n        }\n    }\n\n    /**\n     * !Assume two arrays are equilong (equal length) and the sequences are same,\n     * compare whether this NLDComponents is diff with anotherNLDComponents.\n     * Only compare whether some styles of a basic svg element are different\n     * @param {NLDComponents} anotherNLDComponents\n     * @return {NLDComponents} diff: a NLDComponents which only stores differences\n     */\n    diffWith(anotherNLDComponents) {\n        const diff = new NLDCompDiff()\n        const n = Math.min(\n            this.basicElementArray.length,\n            anotherNLDComponents.basicElementArray.length\n        )\n        for (let i = 0; i < n; i++) {\n            const ele1 = this.basicElementArray[i]\n            const ele2 = anotherNLDComponents.basicElementArray[i]\n            let eleDiff = undefined\n            let channels\n            if (ele1.tagName == ele2.tagName) {\n                channels = new Set(\n                    Object.keys(ele1.style).concat(Object.keys(ele2.style))\n                )\n            } else {\n                // tagName is different\n                eleDiff = { tagName: true }\n                // is any other general channel different?\n                channels = COMMON_STYLE_CHANNELS\n            }\n            channels.forEach((channel) => {\n                if (!object.isEqual(ele1.style[channel], ele2.style[channel])) {\n                    if (!eleDiff) {\n                        eleDiff = { style: {} }\n                    }\n                    eleDiff.style = eleDiff.style ?? {}\n                    eleDiff.style[channel] = true\n                }\n            })\n            diff.array.push(eleDiff)\n        }\n        return diff\n    }\n}\n","/**\n * @create date 2021-03-07 20:18:51\n * @modify date 2021-03-07 20:18:51\n * @desc [description]\n */\nimport { NLDComponents } from './NLDComponents'\n/**\n * if structure\n * @param {html dom element} element1\n * @param {html dom element} element2\n * @return {NLDCompDiff} diff: a NLDCompDiff which extends Array: [{tagName: boolean, style:{[visual channel]: boolean}}]\n */\nexport default function compare(element1, element2) {\n    const NLDComponents1 = new NLDComponents(element1)\n    const NLDComponents2 = new NLDComponents(element2)\n    const diff = NLDComponents1.diffWith(NLDComponents2)\n    return diff\n}\n","import { Statistics } from \"statistics.js\"\nimport { BACKEND_URL } from \"../configs\"\nimport { calcDistance } from \"./graphDistance\"\n\nfunction computePearsonCorrelation(X, Y) {\n    // 计算相关系数r\n    // https://thisancog.github.io/statistics.js/inc/correlation.html\n    const data = []\n    for (let i = 0; i < X.length; i++) {\n        data.push({ x: X[i], y: Y[i] })\n    }\n    const columns = {\n        x: \"metric\",\n        y: \"metric\",\n    }\n    const stats = new Statistics(data, columns)\n    const r = stats.correlationCoefficient(\"x\", \"y\")\n    return r.correlationCoefficient\n}\n\nfunction computeKendallsTau(X, Y) {\n    // 计算Mann-Kendall Test for Trend\n    const data = []\n    for (let i = 0; i < X.length; i++) {\n        data.push({ x: X[i], y: Y[i] })\n    }\n\n    data.sort((a, b) => a.x - b.x)\n    const columns = {\n        x: \"ordinal\",\n        y: \"ordinal\",\n    }\n    const stats = new Statistics(data, columns)\n    const r = stats.kendallsTau(\"x\", \"y\")\n    return r.b.tauB\n}\n\nfunction checkDataType(array) {\n    // 无法转化成数字\n    for (let i = 0; i < array.length; i++) {\n        if (isNaN(parseFloat(array[i]))) {\n            return {\n                first: \"categorical\",\n                second: null,\n            }\n        }\n    }\n\n    // 个数小于5且都是整数\n    if (array.length <= 5 && array.every((x) => Number.isInteger(x))) {\n        return {\n            first: \"categorical\",\n            second: \"numerical\",\n        }\n    }\n\n    // unique的数量小于30%\n    if (new Set(array).size < array.length * 0.3) {\n        return {\n            first: \"categorical\",\n            second: \"numerical\",\n        }\n    }\n\n    return {\n        first: \"numerical\",\n        second: null,\n    }\n}\n\n// async function attributeRelation(X, Y) {\nfunction attributeRelation(X, Y, threshold = 0.6) {\n    // console.log(X, Y)\n    // 判断数据类型\n    let dataTypeX = checkDataType(X)\n    let dataTypeY = checkDataType(Y)\n    // let correlationTest = null\n\n    // 预先判断可能的数值类型\n    if (\n        (dataTypeX.first === \"numerical\" || dataTypeX.second === \"numerical\") &&\n        (dataTypeY.first === \"numerical\" || dataTypeY.second === \"numerical\")\n    ) {\n        X = X.map((x) => parseFloat(x))\n        Y = Y.map((y) => parseFloat(y))\n        // Pearson Correlation & Kendall's Tau\n        const pearsonCorrelation = computePearsonCorrelation(X, Y)\n        // const kendallsTau = computeKendallsTau(X, Y)\n        // const correlationTest = await fetch(BACKEND_URL + \"pearson-kendall\", {\n        //     method: \"POST\",\n        //     headers: {\n        //         \"Content-Type\": \"application/json\",\n        //     },\n        //     body: JSON.stringify({ X, Y }),\n        // }).then((res) => res.json())\n\n        if (\n            // correlationTest.pearson.pvalue < 0.05 &&\n            // correlationTest.kendall.pvalue < 0.05\n            Math.abs(pearsonCorrelation) > threshold\n        ) {\n            return {\n                typeX: \"numerical\",\n                typeY: \"numerical\",\n                correlation: pearsonCorrelation,\n                // pearson: correlationTest.pearson,\n                // kendall: correlationTest.kendall,\n            }\n        }\n    }\n\n    dataTypeX = dataTypeX.first\n    dataTypeY = dataTypeY.first\n\n    if (dataTypeX === \"numerical\" && dataTypeY === \"numerical\") {\n        X = X.map((x) => parseFloat(x))\n        Y = Y.map((y) => parseFloat(y))\n        // Pearson Correlation & Kendall's Tau\n        // const pearsonCorrelation = computePearsonCorrelation(X, Y)\n        // const kendallsTau = computeKendallsTau(X, Y)\n        // if (!correlationTest) {\n        //     correlationTest = await fetch(BACKEND_URL + \"pearson-kendall\", {\n        //         method: \"POST\",\n        //         headers: {\n        //             \"Content-Type\": \"application/json\",\n        //         },\n        //         body: JSON.stringify({ X, Y }),\n        //     }).then((res) => res.json())\n        // }\n\n        // console.log(correlationTest)\n        const pearsonCorrelation = computePearsonCorrelation(X, Y)\n\n        return {\n            typeX: dataTypeX,\n            typeY: dataTypeY,\n            correlation: pearsonCorrelation,\n            // pearson: correlationTest.pearson,\n            // kendall: correlationTest.kendall,\n        }\n    }\n\n    if (dataTypeY === \"categorical\") {\n        if (dataTypeX === \"categorical\") {\n            const map = {}\n            for (let i = 0; i < X.length; i++) {\n                if (!map[Y[i]]) {\n                    map[Y[i]] = new Set()\n                }\n                map[Y[i]].add(X[i])\n            }\n            for (const k in map) {\n                map[k] = Array.from(map[k])\n            }\n\n            return {\n                typeX: dataTypeX,\n                typeY: dataTypeY,\n                attributeMapping: map,\n            }\n        } else {\n            const map = {}\n            for (let i = 0; i < X.length; i++) {\n                if (!map[Y[i]]) {\n                    map[Y[i]] = { min: Number.MAX_VALUE, max: Number.MIN_VALUE }\n                }\n                map[Y[i]].min = Math.min(map[Y[i]].min, X[i])\n                map[Y[i]].max = Math.max(map[Y[i]].max, X[i])\n            }\n\n            return {\n                typeX: dataTypeX,\n                typeY: dataTypeY,\n                attributeMapping: map,\n            }\n        }\n    }\n\n    return undefined\n}\n\nfunction layoutRelation(graph) {\n    let { euclidMatrix, floydMatrix } = calcDistance(graph)\n    const N = euclidMatrix.length\n    floydMatrix = floydMatrix.flat()\n    euclidMatrix = euclidMatrix.flat()\n    const combined = []\n    for (let i = 0; i < floydMatrix.length; i++) {\n        combined.push({\n            floyd: floydMatrix[i],\n            euclid: euclidMatrix[i],\n        })\n    }\n    combined.sort((a, b) => (a.floyd - b.floyd))\n    const data = combined.slice(N)\n    // 计算相关系数r\n    // https://thisancog.github.io/statistics.js/inc/correlation.html\n    const columns = {\n        floyd: 'metric',\n        euclid: 'metric',\n    }\n    const stats = new Statistics(data, columns)\n    const r = stats.correlationCoefficient('floyd', 'euclid')\n    return r.correlationCoefficient\n}\n\n// debug\n\n/*\nconst X = [1, 1, 1, 1, 1, 1, 1, 1]\nconst Y = ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\n\nconsole.log(attributeRelation(X, Y))\n*/\n\nexport {\n    attributeRelation,\n    layoutRelation,\n}\n","function calcEulerDistance(graph) {\n    const N = graph.nodes.length\n    const matrix = Array(N).fill().map(() => Array(N).fill(0))\n    const idToIdx = {}\n    graph.nodes.forEach((n, i) => {\n        idToIdx[n.id] = i\n    })\n\n    graph.nodes.forEach((a, i) => {\n        graph.nodes.forEach((b, j) => {\n            if (i !== j)\n                matrix[i][j] = Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2)\n        })\n    })\n\n    return matrix\n}\n\nfunction floyd(graph) {\n    let INF = Infinity;\n    const id_to_index = new Map();\n    let n = graph[\"nodes\"].length;\n    let matrix = [];\n\n    for (let i = 0; i < n; ++i) {\n        id_to_index.set(graph[\"nodes\"][i][\"id\"], i);\n\n        const unit = [];\n        for (let j = 0; j < n; ++j) {\n            unit.push(INF);\n        }\n        matrix.push(unit);\n    }\n\n    for (let i = 0; i < n; ++i) {\n        matrix[i][i] = 0;\n    }\n\n    for (let i = 0; i < graph[\"links\"].length; ++i) {\n        let fr = id_to_index.get(graph[\"links\"][i][\"source\"]);\n        let to = id_to_index.get(graph[\"links\"][i][\"target\"]);\n        matrix[fr][to] = 1\n        matrix[to][fr] = 1\n    }\n\n    for (let k = 0; k < n; ++k) {\n        for (let i = 0; i < n; ++i) {\n            for (let j = 0; j < n; ++j) {\n                if (matrix[i][k] + matrix[k][j] < matrix[i][j]) {\n                    matrix[i][j] = matrix[i][k] + matrix[k][j];\n                }\n            }\n        }\n    }\n\n    return matrix;\n}\n\nfunction calcDistance(graph) {\n    const N = graph.nodes.length\n    const idToIdx = {}\n    graph.nodes.forEach((n, i) => {\n        idToIdx[n.id] = i\n    })\n\n    const euclidMatrix = Array(N).fill().map(() => Array(N).fill(0))\n    graph.nodes.forEach((a, i) => {\n        graph.nodes.forEach((b, j) => {\n            if (i !== j)\n                euclidMatrix[i][j] = Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2)\n        })\n    })\n\n    const floydMatrix = Array(N).fill().map(() => Array(N).fill(Infinity))\n    for (let i = 0; i < N; ++i) {\n        floydMatrix[i][i] = 0;\n    }\n\n    for (let i = 0; i < graph[\"links\"].length; ++i) {\n        let fr = idToIdx[graph[\"links\"][i][\"source\"]];\n        let to = idToIdx[graph[\"links\"][i][\"target\"]];\n        floydMatrix[fr][to] = 1\n        floydMatrix[to][fr] = 1\n    }\n\n    for (let k = 0; k < N; ++k) {\n        for (let i = 0; i < N; ++i) {\n            for (let j = 0; j < N; ++j) {\n                if (floydMatrix[i][k] + floydMatrix[k][j] < floydMatrix[i][j]) {\n                    floydMatrix[i][j] = floydMatrix[i][k] + floydMatrix[k][j];\n                }\n            }\n        }\n    }\n\n    return {\n        euclidMatrix,\n        floydMatrix\n    }\n}\n\nexport {\n    calcDistance\n}","import * as d3 from \"d3\"\nimport compare from \"./compare\"\nimport { object, NoLinDiagram } from \"./utils\"\nimport { NLDComponents } from \"./NLDComponents\"\nimport { CONNECTOR_CHAR, SHARED_CHANNELS } from \"./global\"\nimport { attributeRelation } from \"../attributeRelation/attributeRelation\"\n\n/**\n *\n * @param {Object} graph: standard node-link data format\n * @param {Function} func: the function that takes data as input and generate a node-link diagram (svg format)\n * @param {String} entityType: 'nodes' | 'links'\n * @param {Dict} entity2element: {entityIndex => elementIndex}\n * @param {Dict} element2label: {elementIndex => label}\n */\nexport function mapAttribute2Channel(\n    graph,\n    func,\n    entityType,\n    entity2element,\n    element2label\n) {\n    // Step1: Eliminate random encoding\n    const svg = func(d3, object.deepcopy(graph))\n    const svgBeta = func(d3, object.deepcopy(graph))\n    const unstableComponents = compare(svg, svgBeta)\n\n    // Step2: shuffle all attributes, find which channels are influnced\n    const attributes = NoLinDiagram.getAttributesOf(\n        graph\n    ) /* Map(name <=> {entityType, range}) */\n    const svgOrigin = func(d3, object.deepcopy(graph))\n    const nldOrigin = new NLDComponents(svgOrigin)\n    const label2attr2diff = {}\n    for (let [name, { type, range }] of attributes[entityType].entries()) {\n        // Step2.1: shuffle and generate\n        const shuffledGraph = object.deepcopy(graph)\n        const shuffledRange = d3.shuffle(range.slice())\n        shuffledGraph[entityType].forEach((entity, i) => {\n            const CONNECTOR = \"@\"\n            if (name.indexOf(CONNECTOR) > 0) {\n                entity[name.split(CONNECTOR)[0]][name.split(CONNECTOR)[1]] =\n                    shuffledRange[i]\n            } else {\n                entity[name] = shuffledRange[i]\n            }\n        })\n        const svgShuffled = func(d3, shuffledGraph)\n        const nldShuffled = new NLDComponents(svgShuffled)\n        const diffs = nldOrigin.diffWith(nldShuffled)\n\n        if (!unstableComponents.isEmpty()) {\n            diffs.eliminate(unstableComponents)\n        }\n        if (diffs.isEmpty()) {\n            // if this attribute cannot cause any change to svg\n            // no need to test it\n            continue\n        }\n\n        // Step2.2: merge diffs by label\n        diffs.array.forEach((diffItem, elementIndex) => {\n            if (diffItem) {\n                const label = element2label[elementIndex]\n                if (label != undefined && label != \"undefined\") {\n                    label2attr2diff[label] = label2attr2diff[label] ?? {}\n                    const attr2diff = label2attr2diff[label]\n                    attr2diff[name] = attr2diff[name] ?? {}\n                    if (diffItem.style) {\n                        Object.keys(diffItem.style).forEach((channel) => {\n                            if (SHARED_CHANNELS.has(channel)) {\n                                // e.g. ellipse and rect share rx and ry\n                                const tagName =\n                                    nldShuffled.basicElementArray[elementIndex]\n                                        .tagName\n                                diffItem.style[channel + \".\" + tagName] =\n                                    diffItem.style[channel]\n                                delete diffItem.style[channel]\n                            }\n                        })\n                    }\n                    attr2diff[name] = mergeDiff(diffItem, attr2diff[name])\n                }\n            }\n        })\n    }\n\n    // Step3: compute correlations\n    // compute label2elements, element2entity\n    const label2elements = {}\n    const element2entity = []\n    element2label.forEach((label, elementIndex) => {\n        if (!label2elements[label]) {\n            label2elements[label] = new Set()\n        }\n        label2elements[label].add(elementIndex)\n    })\n    entity2element.forEach((eleIndexSet, entityIndex) => {\n        eleIndexSet.forEach((eleIndex) => {\n            element2entity[eleIndex] = entityIndex\n        })\n    })\n\n    for (let label in label2attr2diff) {\n        const attr2diff = label2attr2diff[label]\n        for (let attr in attr2diff) {\n            const diff = attr2diff[attr]\n            const channelNames = []\n            // record channelNames\n            if (diff.tagName) {\n                channelNames.push(\"tagName\")\n            }\n            if (diff.style) {\n                for (let channel in diff.style) {\n                    diff.style[channel] && channelNames.push(channel)\n                }\n            }\n            // record channel values\n            const channels = {}\n            channelNames.forEach((name) => {\n                channels[name] = []\n            })\n            label2elements[label].forEach((elementIndex) => {\n                const entityIndex = element2entity[elementIndex]\n                const element = nldOrigin.basicElementArray[elementIndex]\n                let attrVal = graph[entityType][entityIndex][attr]\n                const CONNECTOR = \"@\"\n                if (attr.indexOf(CONNECTOR) > 0) {\n                    attrVal =\n                        graph[entityType][entityIndex][\n                            attr.split(CONNECTOR)[0]\n                        ][attr.split(CONNECTOR)[1]]\n                }\n\n                channelNames.forEach((name) => {\n                    if (name === \"tagName\") {\n                        channels[name][entityIndex] = [attrVal, element.tagName]\n                    } else {\n                        channels[name][entityIndex] = [\n                            attrVal,\n                            element.style[name.split(\".\")[0]],\n                        ]\n                    }\n                })\n            })\n\n            for (let i = 0; i < channelNames.length; i++) {\n                const name = channelNames[i]\n                channels[name] = channels[name].filter(([attrVal, chanVal]) => {\n                    return (\n                        chanVal !== undefined &&\n                        chanVal !== \"auto\" &&\n                        chanVal !== \"undefined\"\n                    )\n                })\n                const x = channels[name].map((_) => _[0])\n                const y = channels[name].map((_) => _[1])\n                let indepVariable = x\n                let depVariable = y\n                // if (x.some((_) => Array.isArray(_))) {\n                //     for (let i = 0; i < x[0].length; i++) {\n                //         // assume it is a equal-length array\n                //         indepVariable = x.map((_) => _[i])\n                //         attributeRelation(\n                //             indepVariable,\n                //             depVariable\n                //         ).then((relation) => {})\n                //     }\n                // } else {\n                // const relation = await attributeRelation(\n                const relation = attributeRelation(\n                    indepVariable,\n                    depVariable\n                )\n\n                if (relation) {\n                    if (\n                        relation.typeX === \"numerical\" &&\n                        relation.typeY === \"categorical\"\n                    )\n                        debugger\n                    if (name === \"tagName\") {\n                        diff.tagName = relation\n                    } else {\n                        diff.style[name] = relation\n                    }\n                }\n                // }\n            }\n        }\n    }\n    // console.log(label2attr2diff)\n    return label2attr2diff\n\n    function mergeDiff(diff1, diff2) {\n        const mergedDiff = {}\n        const diffs = [diff1, diff2]\n        diffs.forEach((diff) => {\n            if (diff.tagName) {\n                mergedDiff.tagName |= diff.tagName\n            }\n            if (diff.style) {\n                for (let channel in diff.style) {\n                    mergedDiff.style = mergedDiff.style ?? {}\n                    mergedDiff.style[channel] |= diff.style[channel]\n                }\n            }\n        })\n        return mergedDiff\n    }\n}\n\n/**\n *\n * @param {Object} graph: standard node-link data format\n * @param {Function} func: the function that takes data as input and generate a node-link diagram (svg format)\n * @param {String} entityType: 'nodes' | 'links'\n */\nexport function mapEntity2Element(graph, func, entityType) {\n    // Step1: Eliminate random encoding\n    const svg = func(d3, object.deepcopy(graph))\n    const svgBeta = func(d3, object.deepcopy(graph))\n    const unstableComponents = compare(svg, svgBeta)\n\n    // Step2: Get the Mapping\n    const entity2element = new Array(graph[entityType].length) // : [[entityIndex]: Set(elementIndex)]\n    const svgOrigin = func(d3, object.deepcopy(graph))\n\n    // Step2.2: get the mapping by swapping entities\n    // swap two entities\n    // we assume that it will not change the element sequence\n    const labelsOfElements = []\n    labelsOfElements.max = 0\n    const swapCache = new Map()\n    for (let i = 0; i < graph[entityType].length; i++) {\n        console.log(\n            `%c For %c${entityType}%c's attribute, computing %c${entityType}%c[%c${i}/${graph[entityType].length}%c]'s encoding...`,\n            \"background: #222; color: #bada55\",\n            \"background: #222; color: #d94e54\",\n            \"background: #222; color: #bada55\",\n            \"background: #222; color: #d94e54\",\n            \"background: #222; color: #bada55\",\n            \"background: #222; color: #d94e54\",\n            \"background: #222; color: #bada55\"\n        )\n\n        let clonedGraph = object.deepcopy(graph)\n        let thisEntity = clonedGraph[entityType][i]\n        let svgControl = svgOrigin\n\n        // Step2.2.1 find all entities that don't have totally same attributes with entities[i]\n        let entitiesWithDiffAttr_INDEX = findEntitiesWithDiffAttr_INDEX(\n            thisEntity,\n            clonedGraph\n        )\n        function findEntitiesWithDiffAttr_INDEX(thisEntity, graph) {\n            let entitiesWithDiffAttr_INDEX = [] // entities with different attribute (just stores index)\n            let valueStack = []\n            function isAttributesAllSame(entity) {\n                return !Object.keys(thisEntity).some(\n                    (name) =>\n                        name !== \"id\" &&\n                        name !== \"source\" &&\n                        name !== \"target\" &&\n                        !object.isEqual(thisEntity[name], entity[name])\n                )\n            }\n            graph[entityType].forEach((entity, j) => {\n                if (!isAttributesAllSame(entity)) {\n                    if (\n                        valueStack.every(\n                            (value) => !isAttributesAllSame(value, entity)\n                        )\n                    ) {\n                        entitiesWithDiffAttr_INDEX.push(j)\n                    }\n                }\n            })\n            return entitiesWithDiffAttr_INDEX\n        }\n\n        // Step2.2.2 swap thisEntity with each of entities with at least one different attribute\n        if (entitiesWithDiffAttr_INDEX.length == 0) {\n            console.error(\n                \"All entities have same attribute, algorithm can not detect any encoding.\"\n            )\n            debugger // some thing wrong, all entities have same attribute\n        } else if (entitiesWithDiffAttr_INDEX.length == 1) {\n            // only one entity is different with thisEntity\n            // first swap with the diff entity\n            const j = entitiesWithDiffAttr_INDEX[0]\n            clonedGraph[entityType][i] = clonedGraph[entityType][j]\n            clonedGraph[entityType][j] = thisEntity\n            thisEntity = clonedGraph[entityType][i]\n            // second re-find entities with different attribute\n            entitiesWithDiffAttr_INDEX = findEntitiesWithDiffAttr_INDEX(\n                thisEntity,\n                clonedGraph\n            )\n            // if still only one entity diff with thisEntity, can not deal with such case\n            if (entitiesWithDiffAttr_INDEX.length == 1) {\n                console.error(\n                    `Cannot deal with ${entityType}[${i}], only one ${entityType.slice(\n                        0,\n                        -1\n                    )} diffs with it.`\n                )\n                debugger\n            } else {\n                // re-generate the control group svg\n                svgControl = func(d3, object.deepcopy(clonedGraph))\n            }\n        }\n\n        // swap this entity with any other diff entities\n        const elementFrequency = {}\n        const nldControl = new NLDComponents(svgControl)\n        entitiesWithDiffAttr_INDEX.forEach((entityIndex) => {\n            const entity = clonedGraph[entityType][entityIndex]\n\n            clonedGraph[entityType][i] = entity\n            clonedGraph[entityType][entityIndex] = thisEntity\n            thisEntity = clonedGraph[entityType][i]\n\n            let nldBeforeSwap, nldAfterSwap, indexofSwapDiff\n            const key = `${entityIndex}${CONNECTOR_CHAR}${i}`\n\n            if (swapCache.has(key)) {\n                ;[nldBeforeSwap, nldAfterSwap, indexofSwapDiff] = swapCache.get(\n                    key\n                )\n            }\n\n            if (!nldBeforeSwap && !nldAfterSwap && !indexofSwapDiff) {\n                nldBeforeSwap = nldControl\n                const svgAfterSwap = func(d3, object.deepcopy(clonedGraph))\n                nldAfterSwap = new NLDComponents(svgAfterSwap)\n                const swapDiff = nldBeforeSwap.diffWith(nldAfterSwap)\n\n                if (!unstableComponents.isEmpty()) {\n                    swapDiff.eliminate(unstableComponents)\n                }\n\n                indexofSwapDiff = swapDiff.getIndexOfDifferences()\n                swapCache.set(`${i}${CONNECTOR_CHAR}${entityIndex}`, [\n                    nldBeforeSwap,\n                    nldAfterSwap,\n                    indexofSwapDiff,\n                ])\n            }\n\n            indexofSwapDiff.forEach((elementIndex) => {\n                if (!elementFrequency[elementIndex]) {\n                    elementFrequency[elementIndex] = 0\n                }\n                elementFrequency[elementIndex] += 1\n                if (elementFrequency[elementIndex] >= 2) {\n                    // occurs more than once, it should be entity[i]'s element\n                    if (!entity2element[i]) {\n                        entity2element[i] = new Set()\n                    }\n                    entity2element[i].add(elementIndex)\n                }\n                // compare which elements of nldSwapped is same with nldBeforeSwap\n                // if (entityType == \"links\") debugger\n                indexofSwapDiff.forEach((elementJndex) => {\n                    if (\n                        elementIndex !== elementJndex &&\n                        object.isEqual(\n                            {\n                                style:\n                                    nldBeforeSwap.basicElementArray[\n                                        elementIndex\n                                    ].style,\n                                tagName:\n                                    nldBeforeSwap.basicElementArray[\n                                        elementIndex\n                                    ].tagName,\n                            },\n                            {\n                                style:\n                                    nldAfterSwap.basicElementArray[elementJndex]\n                                        .style,\n                                tagName:\n                                    nldAfterSwap.basicElementArray[elementJndex]\n                                        .tagName,\n                            }\n                        )\n                    ) {\n                        if (\n                            labelsOfElements[elementIndex] &&\n                            !labelsOfElements[elementJndex]\n                        ) {\n                            labelsOfElements[elementJndex] =\n                                labelsOfElements[elementIndex]\n                        } else if (\n                            !labelsOfElements[elementIndex] &&\n                            labelsOfElements[elementJndex]\n                        ) {\n                            labelsOfElements[elementIndex] =\n                                labelsOfElements[elementJndex]\n                        } else if (\n                            !labelsOfElements[elementIndex] &&\n                            !labelsOfElements[elementJndex]\n                        ) {\n                            labelsOfElements[elementIndex] = labelsOfElements[\n                                elementJndex\n                            ] = ++labelsOfElements.max\n                        } else {\n                            if (\n                                labelsOfElements[elementIndex] !=\n                                labelsOfElements[elementJndex]\n                            )\n                                debugger\n                        }\n                    }\n                })\n            })\n\n            // swap back\n            clonedGraph[entityType][i] = clonedGraph[entityType][entityIndex]\n            clonedGraph[entityType][entityIndex] = thisEntity\n            thisEntity = clonedGraph[entityType][i]\n        })\n    }\n    return [entity2element, labelsOfElements]\n}\n","function TitleBar({ text }) {\n    return (\n        <div\n            style={{\n                width: \"100vw\",\n                height: 60,\n                lineHeight: \"60px\",\n                borderBottom: \"1px solid #dfdfdf\",\n                fontFamily: \"Times\",\n                fontSize: 35,\n                fontWeight: \"600\",\n                textIndent: 30,\n                position: \"fixed\",\n                top: 0,\n                // zIndex: 1000,\n                backgroundColor: \"white\",\n            }}\n        >\n            {text ? text : \"Graph Auxiliaries\"}\n        </div>\n    )\n}\n\nexport { TitleBar }\n","import { findSimiliarColor } from './color'\n\nfunction processValue(value) {\n    // 如果有@符号，变成方括号表达\n    if (typeof value === 'string' && value.includes('@')) {\n        value = value.replace(/@(.*)/g, (_, x) => { return `[${x}]` })\n    } else if (value === 'r') {\n        value = 'radius'\n    }\n    return value\n}\n\nexport function styleParameter(parameter) {\n    let type = ''\n    let value = ''\n    if (parameter.type) {\n        type = parameter.type\n        value = parameter.value\n    } else {\n        value = parameter\n    }\n\n    if (Array.isArray(value)) {\n        return value.map(\n            (_) => `<span class='description-parameter ${type}'>${processValue(_)}</span>`\n            // (_) => styleParameter(_)\n        )\n    }\n\n    value = processValue(value)\n\n    // 判断是颜色\n    if (/^#(?:[0-9a-fA-F]{3}){1,2}$/.test(value)) {\n        const name = findSimiliarColor(value)\n        return `<span class='description-parameter ${type}'>${name}(<span style='color: ${value};'>&#9724;</span>${value})</span>`\n    }\n\n    return `<span class='description-parameter ${type}'>${value}</span>`\n}","import React from \"react\"\nimport * as d3 from \"d3\"\n\nfunction processIcon(element, width, maxBBox) {\n    const bbox = element.bbox\n    const k = width / maxBBox\n    const newElement = element.group.cloneNode(true)\n    d3.select(newElement).attr(\n        \"transform\",\n        `scale(${k})translate(${-(bbox.x + bbox.width / 2)}, ${-(\n            bbox.y +\n            bbox.height / 2\n        )})`\n    )\n\n    return newElement\n}\n\nfunction Icon({ el, width, viewBox }) {\n    if (!el) return null\n\n    return (\n        <svg\n            width={width}\n            height={width}\n            style={\n                el.tagName === \"line\"\n                    ? {\n                          verticalAlign: \"middle\",\n                          stroke: \"#999\",\n                          opacity: \"0.6\",\n                      }\n                    : {\n                          verticalAlign: \"middle\",\n                      }\n            }\n            viewBox={\n                viewBox\n                    ? viewBox\n                    : `-${width / 2} -${width / 2} ${width} ${width}`\n            }\n            dangerouslySetInnerHTML={{\n                __html: new XMLSerializer().serializeToString(el),\n            }}\n        ></svg>\n    )\n}\n\nexport { processIcon, Icon }\n","import { Tree } from \"antd\"\nimport * as d3 from \"d3\"\nimport { findSimiliarColor } from \"../utils/color\"\nimport { Loader } from \"./Loader\"\nimport { Icon, processIcon } from \"../components/Icon\"\n\nfunction DescriptionTerm({ term, visibleElements }) {\n    const styleParameter = (word) => {\n        if (Array.isArray(word)) {\n            return word.map(\n                (_) => `<span class='description-parameter'>${_}</span>`\n            )\n        }\n\n        // 判断是颜色\n        if (/^#(?:[0-9a-fA-F]{3}){1,2}$/.test(word)) {\n            const name = findSimiliarColor(word)\n            return `<span class='description-parameter'>${name}(<span style='color: ${word};'>&#9724;</span>${word})</span>`\n        }\n\n        return `<span class='description-parameter'>${word}</span>`\n    }\n    return (\n        <p\n            style={{\n                margin: 0,\n                padding: 2,\n                fontFamily: \"Times\",\n            }}\n            onMouseOver={(e) => {\n                e.target.style.backgroundColor = \"#e9e9e9\"\n                visibleElements.forEach((e) => {\n                    d3.select(e).attr(\"opacity\", 0.1)\n                })\n                term.elements.forEach((e) => {\n                    d3.select(e).attr(\"opacity\", 1)\n                })\n            }}\n            onMouseLeave={(e) => {\n                e.target.style.backgroundColor = \"#fff\"\n                visibleElements.forEach((e) => {\n                    d3.select(e).attr(\"opacity\", 1)\n                })\n            }}\n            dangerouslySetInnerHTML={{\n                __html: term.content,\n                // __html: term.template(\n                //     ...term.parameters.map(\n                //         styleParameter\n                //     )\n                // ),\n            }}\n        ></p>\n    )\n}\n\nfunction getTreeData(\n    graphDescriptions,\n    visibleElements,\n    defaultExpandNodes,\n    parentKey = \"\"\n) {\n    const res = []\n    graphDescriptions.forEach((term, i) => {\n        const key = `${parentKey}-${i}`\n        if (term.switch) {\n            defaultExpandNodes.push(key)\n        }\n        res.push({\n            title: (\n                <DescriptionTerm\n                    visibleElements={visibleElements}\n                    term={term}\n                />\n            ),\n            key: key,\n            children:\n                Array.isArray(term.children) && term.children.length > 0\n                    ? getTreeData(\n                          term.children,\n                          visibleElements,\n                          defaultExpandNodes,\n                          key\n                      )\n                    : null,\n        })\n    })\n    return res\n}\n\nfunction TreeDescription({ graphDescriptions, visibleElements }) {\n    let treeData = []\n    const defaultExpandNodes = []\n    if (graphDescriptions && graphDescriptions.length) {\n        treeData = getTreeData(\n            graphDescriptions,\n            visibleElements,\n            defaultExpandNodes\n        )\n    }\n    return (\n        <Tree\n            selectable={false}\n            treeData={treeData}\n            defaultExpandNodes={defaultExpandNodes}\n        />\n    )\n}\n\nfunction isFloat(n) {\n    return Number(n) == n && n % 1 !== 0\n}\n\nfunction isNumber(n) {\n    return Number(n) == n\n}\n\nfunction processFloat(x) {\n    if (isFloat(x)) {\n        return Number(x).toFixed(2)\n    }\n    return x\n}\n\nfunction upperFirst(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nfunction DescriptionLegendTerm({ term }) {\n    return (\n        <p\n            style={{\n                margin: 0,\n                padding: 2,\n                fontFamily: \"Times\",\n            }}\n            dangerouslySetInnerHTML={{\n                __html: term.content,\n            }}\n        ></p>\n    )\n}\n\nfunction getTreeDataLegend(\n    descriptions,\n    data,\n    elementInfo,\n    defaultExpandNodes,\n    entityElementsGroups,\n    visibleElements,\n    parentKey = \"\",\n    SVG\n) {\n    let res = []\n\n    descriptions.forEach((term, i) => {\n        const key = `${parentKey}-${i}`\n        if (term.switch) {\n            defaultExpandNodes.push(key)\n        }\n\n        const parameters = {}\n        term.parameters.forEach((p) => {\n            parameters[p.type] = p.value\n        })\n\n        // 目前只保留属性和值的对应\n        if (\n            \"channel-parameter\" in parameters &&\n            \"attribute-parameter\" in parameters\n        ) {\n            const children = []\n            const attr = parameters[\"attribute-parameter\"]\n            const duplicate = new Map()\n            const maxBBox = d3.max(term.elements, (e) =>\n                Math.max(e.getBBox().width, e.getBBox().height)\n            )\n            for (let i = 0; i < term.elements.length; i++) {\n                // NOTE: 极其诡异的获取数据方式\n                const dataTerm =\n                    data[elementInfo[term.elementsIdx[i]].entityType + \"s\"][\n                        elementInfo[term.elementsIdx[i]].entityIndex\n                    ]\n                const attrValue = processFloat(\n                    attr.indexOf(\"@\") !== -1\n                        ? dataTerm[attr.split(\"@\")[0]][attr.split(\"@\")[1]]\n                        : dataTerm[attr]\n                )\n\n                let channel = term.elements[i].getAttribute(\n                    parameters[\"channel-parameter\"]\n                )\n                if (\n                    parameters[\"channel-parameter\"].indexOf(\"textContent\") !==\n                    -1\n                ) {\n                    channel = term.elements[i].innerHTML\n                }\n                let channelElement = (\n                    <span className=\"description-parameter attribute-parameter\">\n                        {processFloat(channel)}\n                    </span>\n                )\n\n                if (/^#(?:[0-9a-fA-F]{3}){1,2}$/.test(channel)) {\n                    const name = findSimiliarColor(channel)\n                    channelElement = (\n                        <span class=\"description-parameter\">\n                            {name}(\n                            <span style={{ color: channel }}>&#9724;</span>\n                            {channel})\n                        </span>\n                    )\n                }\n                const key = `${channel}→${attrValue}`\n                const isDuplicate = duplicate.has(key)\n                if (isDuplicate) {\n                    duplicate.get(key).push(term.elements[i])\n                    continue\n                } else {\n                    duplicate.set(key, [term.elements[i]])\n                }\n\n                // TODO: icon位置和大小还没有处理好, bbox没有处理\n                const elIcon = processIcon(\n                    {\n                        group: term.elements[i],\n                        bbox: term.elements[i].getBBox(),\n                    },\n                    30,\n                    maxBBox\n                )\n                const orIcon = term.elements[i]\n\n                const title = (\n                    <div\n                        style={{\n                            paddingRight: \"10px\",\n                        }}\n                        onMouseEnter={(e) => {\n                            e.currentTarget.style.backgroundColor = \"#e9e9e9\"\n                            visibleElements.forEach((e) => {\n                                d3.select(e).attr(\"opacity\", 0.1)\n                            })\n                            duplicate.get(key).forEach((e) => {\n                                d3.select(e).attr(\"opacity\", 1)\n                            })\n                        }}\n                        onMouseLeave={(e) => {\n                            e.currentTarget.style.backgroundColor = \"#fff\"\n                            visibleElements.forEach((e) => {\n                                d3.select(e).attr(\"opacity\", 1)\n                            })\n                        }}\n                    >\n                        {elIcon && <Icon el={elIcon} width={30} />}\n                        <span className=\"description-parameter channel-parameter\">\n                            {parameters[\"channel-parameter\"]}\n                        </span>\n                        <span>: </span>\n                        {channelElement}\n                        <span> → </span>\n                        <span className=\"description-parameter attribute-parameter\">\n                            {attr.indexOf(\"@\") !== -1\n                                ? `${attr.split(\"@\")[0]}[${attr.split(\"@\")[1]}]`\n                                : attr}\n                        </span>\n                        <span>: </span>\n                        <span className=\"description-parameter value-parameter\">\n                            {attrValue}\n                        </span>\n                    </div>\n                )\n\n                children.push({\n                    orIcon,\n                    elIcon,\n                    channel,\n                    attrValue,\n                    title: title,\n                    key: `${key}-${i}`,\n                })\n            }\n\n            children.sort((e1, e2) => {\n                function compare(a, b) {\n                    let channel1 = a\n                    let channel2 = b\n                    if (isNumber(channel1) && isNumber(channel2)) {\n                        channel1 = Number(channel1)\n                        channel2 = Number(channel2)\n                    }\n                    if (channel1 > channel2) return 1\n                    else if (channel1 < channel2) return -1\n                    else return 0\n                }\n\n                if (e1.channel === e2.channel) {\n                    return compare(e1.attrValue, e2.attrValue)\n                } else {\n                    return compare(e1.channel, e2.channel)\n                }\n            })\n\n            const elIcons = [\n                children[children.length - 1].orIcon.cloneNode(true),\n                children[children.length - 1].orIcon.cloneNode(true),\n                children[children.length - 1].orIcon.cloneNode(true),\n            ]\n            if (parameters[\"channel-parameter\"][0] === \"textContent\") {\n                elIcons[0].textContent = children[0].channel\n                elIcons[1].textContent =\n                    children[Math.floor(children.length / 2)].channel\n            } else {\n                elIcons[0].setAttribute(\n                    parameters[\"channel-parameter\"][0],\n                    children[0].channel\n                )\n                elIcons[1].setAttribute(\n                    parameters[\"channel-parameter\"][0],\n                    children[Math.floor(children.length / 2)].channel\n                )\n            }\n            const clonedSVG = SVG.cloneNode()\n            document.body.appendChild(clonedSVG)\n            const elIconsBBox = []\n            const elIconsMaxBBox = elIcons.reduce((maxBBox, el) => {\n                clonedSVG.appendChild(el)\n                const bbox = el.getBBox()\n                elIconsBBox.push(bbox)\n                return Math.max(Math.max(bbox.width, bbox.height), maxBBox)\n            }, 0)\n            document.body.removeChild(clonedSVG)\n            elIcons.forEach((el) => el.remove())\n            clonedSVG.remove()\n            // if (parameters[\"channel-parameter\"][0] === \"y1\") debugger\n            const title = (\n                <div\n                    style={{\n                        padding: 5,\n                    }}\n                    onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = \"#e9e9e9\"\n                        visibleElements.forEach((e) => {\n                            d3.select(e).attr(\"opacity\", 0.1)\n                        })\n                        term.elements.forEach((e) => {\n                            d3.select(e).attr(\"opacity\", 1)\n                        })\n                    }}\n                    onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = \"#fff\"\n                        visibleElements.forEach((e) => {\n                            d3.select(e).attr(\"opacity\", 1)\n                        })\n                    }}\n                >\n                    {elIcons &&\n                        elIcons.map((elIcon, i) => {\n                            const bbox = elIconsBBox[i]\n                            const k = (30 * 0.8) / elIconsMaxBBox\n                            const newElement = elIcon.cloneNode(true)\n                            d3.select(newElement).attr(\n                                \"transform\",\n                                `scale(${k})translate(${-bbox.x + 2}, ${\n                                    -bbox.y + 2\n                                })`\n                            )\n                            return (\n                                <span style={{ marginRight: 3 }}>\n                                    <Icon\n                                        el={newElement}\n                                        viewBox={`0 0 30 30`}\n                                        key={i}\n                                        width={30}\n                                    />\n                                </span>\n                            )\n                        })}\n                    <span className=\"description-parameter channel-parameter\">\n                        {parameters[\"channel-parameter\"]}\n                    </span>\n                    <span> → </span>\n                    <span className=\"description-parameter attribute-parameter\">\n                        {attr.indexOf(\"@\") !== -1\n                            ? `${attr.split(\"@\")[0]}[${attr.split(\"@\")[1]}]`\n                            : attr}\n                    </span>\n                </div>\n            )\n            res.push({\n                title: title,\n                key: key,\n                children,\n            })\n        } else if (\"entity-parameter\" in parameters) {\n            // Node/Link的情况\n            res.push({\n                title: (\n                    <div className=\"description-parameter entity-parameter\">\n                        {upperFirst(parameters[\"entity-parameter\"])}\n                    </div>\n                ),\n                key: key,\n                children:\n                    Array.isArray(term.children) && term.children.length > 0\n                        ? getTreeDataLegend(\n                              term.children,\n                              data,\n                              elementInfo,\n                              defaultExpandNodes,\n                              entityElementsGroups,\n                              visibleElements,\n                              key,\n                              SVG\n                          )\n                        : null,\n            })\n        } else {\n            if (\n                Array.isArray(parameters[\"element-parameter\"]) &&\n                parameters[\"element-parameter\"].length > 1\n            ) {\n                // NOTE: tagName的情况，特殊判断\n                console.log(parameters)\n                const tagAttr = term.children[0].parameters.filter(\n                    (x) => x.type === \"attribute-parameter\"\n                )[0].value\n                const title = (\n                    <span\n                        style={{\n                            padding: 5,\n                        }}\n                        onMouseEnter={(e) => {\n                            e.currentTarget.style.backgroundColor = \"#e9e9e9\"\n                            visibleElements.forEach((e) => {\n                                d3.select(e).attr(\"opacity\", 0.1)\n                            })\n                            term.elements.forEach((e) => {\n                                d3.select(e).attr(\"opacity\", 1)\n                            })\n                        }}\n                        onMouseLeave={(e) => {\n                            e.currentTarget.style.backgroundColor = \"#fff\"\n                            visibleElements.forEach((e) => {\n                                d3.select(e).attr(\"opacity\", 1)\n                            })\n                        }}\n                    >\n                        <span className=\"description-parameter channel-parameter\">\n                            tagName\n                        </span>\n                        <span> → </span>\n                        <span className=\"description-parameter attribute-parameter\">\n                            {tagAttr}\n                        </span>\n                    </span>\n                )\n                let children = []\n\n                term.children.forEach((child, childIdx) => {\n                    const childParameters = {}\n                    child.parameters.forEach((p) => {\n                        childParameters[p.type] = p.value\n                    })\n                    const attr = childParameters[\"attribute-parameter\"]\n                    const attrValue = childParameters[\"value-parameter\"]\n                    const duplicate = new Map()\n                    // TODO: icon位置和大小还没有处理好, bbox没有处理\n                    for (let i = 0; i < child.elements.length; i++) {\n                        const elIcon = processIcon(\n                            {\n                                group: child.elements[i],\n                                bbox: child.elements[i].getBBox(),\n                            },\n                            30,\n                            30\n                        )\n\n                        const key = `${childParameters[\"element-parameter\"]}→${attrValue}`\n                        const isDuplicate = duplicate.has(key)\n                        if (isDuplicate) {\n                            duplicate.get(key).push(child.elements[i])\n                            continue\n                        } else {\n                            duplicate.set(key, [child.elements[i]])\n                        }\n\n                        const title = (\n                            <div\n                                style={{\n                                    paddingRight: \"10px\",\n                                }}\n                                onMouseEnter={(e) => {\n                                    e.currentTarget.style.backgroundColor =\n                                        \"#e9e9e9\"\n                                    visibleElements.forEach((e) => {\n                                        d3.select(e).attr(\"opacity\", 0.1)\n                                    })\n                                    duplicate.get(key).forEach((e) => {\n                                        d3.select(e).attr(\"opacity\", 1)\n                                    })\n                                }}\n                                onMouseLeave={(e) => {\n                                    e.currentTarget.style.backgroundColor =\n                                        \"#fff\"\n                                    visibleElements.forEach((e) => {\n                                        d3.select(e).attr(\"opacity\", 1)\n                                    })\n                                }}\n                            >\n                                {elIcon && <Icon el={elIcon} width={30} />}\n                                <span className=\"description-parameter channel-parameter\">\n                                    {\"tagName\"}\n                                </span>\n                                <span>: </span>\n                                <span\n                                    class=\"description-parameter\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: childParameters[\n                                            \"element-parameter\"\n                                        ],\n                                    }}\n                                ></span>\n                                <span> → </span>\n                                <span className=\"description-parameter attribute-parameter\">\n                                    {attr.indexOf(\"@\") !== -1\n                                        ? `${attr.split(\"@\")[0]}[${\n                                              attr.split(\"@\")[1]\n                                          }]`\n                                        : attr}\n                                </span>\n                                <span>: </span>\n                                <span className=\"description-parameter value-parameter\">\n                                    {attrValue}\n                                </span>\n                            </div>\n                        )\n\n                        children.push({\n                            title: title,\n                            key: `${key}--${childIdx}--${i}`,\n                        })\n                    }\n                })\n\n                res.push({\n                    title: title,\n                    key: key,\n                    children,\n                })\n            }\n\n            // 跳过，直接获取children\n            res = res.concat(\n                Array.isArray(term.children) && term.children.length > 0\n                    ? getTreeDataLegend(\n                          term.children,\n                          data,\n                          elementInfo,\n                          defaultExpandNodes,\n                          entityElementsGroups,\n                          visibleElements,\n                          key,\n                          SVG\n                      )\n                    : null\n            )\n        }\n    })\n\n    return res\n}\n\nexport function DescriptionsLegend({\n    data,\n    elementInfo,\n    entityElementsGroups,\n    graphDescriptions,\n    visibleElements,\n    loadingText,\n    loading,\n    SVG,\n}) {\n    if (\n        !elementInfo ||\n        !data ||\n        !graphDescriptions ||\n        !entityElementsGroups ||\n        !(\"node\" in entityElementsGroups)\n    )\n        return null\n\n    console.log(graphDescriptions)\n    console.log(data)\n    console.log(elementInfo)\n\n    let treeData = []\n    const defaultExpandNodes = []\n    if (!loading && graphDescriptions && graphDescriptions.length) {\n        treeData = getTreeDataLegend(\n            graphDescriptions,\n            data,\n            elementInfo,\n            defaultExpandNodes,\n            entityElementsGroups,\n            visibleElements,\n            \"\",\n            SVG\n        )\n        console.log(treeData)\n    }\n\n    return (\n        <div\n            style={{\n                margin: 20,\n                marginLeft: 30,\n            }}\n        >\n            {!loading && graphDescriptions && graphDescriptions.length ? (\n                <Tree\n                    style={{\n                        fontSize: 18,\n                    }}\n                    selectable={false}\n                    treeData={treeData}\n                    defaultExpandedKeys={defaultExpandNodes}\n                />\n            ) : (\n                // graphDescriptions.map((term, i) => {\n                //     return <DescriptionTerm\n                //         visibleElements={visibleElements}\n                //         term={term}\n                //     />\n                // })\n                <Loader\n                    style={{\n                        margin: 20,\n                        marginLeft: 28,\n                        padding: 2,\n                        fontFamily: \"Times\",\n                    }}\n                    state={loadingText}\n                ></Loader>\n            )}\n        </div>\n    )\n}\n","import { Header } from \"../components/Header\"\nimport * as d3 from \"d3\"\nimport { linkConditionDescription } from \"../descriptions/descriptions\"\nimport \"./descriptionPanel.css\"\nimport { Loader } from \"../components/Loader\"\nimport { Divider } from \"antd\"\nimport { DescriptionsLegend } from \"../components/DescriptionsLegend\"\n// import { useState } from \"react/cjs/react.development\"\nimport { useEffect, useState } from \"react\"\nimport { Icon, processIcon } from \"../components/Icon\"\n\nfunction getLayoutEncodings(layoutDescriptions) {\n    const res = {\n        isTopo: false,\n        encodings: [],\n        elements: new Set(),\n    }\n    for (const desc of layoutDescriptions) {\n        if (desc.parameters.length === 0) {\n            res.isTopo = true\n            desc.elements.forEach((el) => {\n                res.elements.add(el)\n            })\n        } else {\n            const encoding = {\n                key: desc.parameters[0].value,\n                value: desc.parameters[1].value,\n            }\n            res.encodings.push(encoding)\n            // TODO: always single children?\n            desc.children[0].elements.forEach((el) => {\n                res.elements.add(el)\n            })\n        }\n    }\n\n    return res\n}\n\nfunction DescriptionLegendPanel({\n    dataFolder,\n    dataStr,\n    elementInfo,\n    style,\n    linkConditions,\n    graphDescriptions,\n    layoutDescriptions,\n    entityElementsGroups,\n    visibleElements,\n    loading,\n    SVG,\n    nodeMeanings,\n    switchedOn,\n}) {\n    const [data, setData] = useState(null)\n\n    useEffect(() => {\n        if (!dataStr) return\n        const data = JSON.parse(dataStr)\n        setData(data)\n    }, [dataStr])\n\n    const linkDescription = linkConditionDescription(linkConditions)\n    const layoutEncodings = getLayoutEncodings(layoutDescriptions)\n\n    let LEGENDS_ELEMENT_WIDTH = 50\n    let nodeIcon = null\n    let linkIcon = null\n    if (entityElementsGroups[\"node\"]) {\n        const maxBBox = {\n            node: Math.max(\n                entityElementsGroups[\"node\"].maxBBox.width,\n                entityElementsGroups[\"node\"].maxBBox.height\n            ),\n            link: Math.max(\n                entityElementsGroups[\"link\"].maxBBox.width,\n                entityElementsGroups[\"link\"].maxBBox.height\n            ),\n        }\n\n        nodeIcon = processIcon(\n            entityElementsGroups[\"node\"][0],\n            Math.min(LEGENDS_ELEMENT_WIDTH, maxBBox.node),\n            maxBBox.node\n        )\n        linkIcon = processIcon(\n            entityElementsGroups[\"link\"][0],\n            Math.min(LEGENDS_ELEMENT_WIDTH, maxBBox.link),\n            maxBBox.link\n        )\n    }\n\n    return (\n        <div\n            style={{\n                ...style,\n                margin: 5,\n                display: `${switchedOn ? \"flex\" : \"none\"}`,\n                flexDirection: \"column\",\n            }}\n        >\n            <Header title=\"Legends\" />\n\n            <div\n                style={{\n                    // borderLeft: \"1px solid gray\",\n                    fontSize: 18,\n                    paddingLeft: 10,\n                }}\n            >\n                <Divider\n                    orientation=\"left\"\n                    style={{\n                        fontSize: 20,\n                        fontFamily: \"Times\",\n                    }}\n                >\n                    Node & Link Meanings\n                </Divider>\n\n                {!loading ? (\n                    <div\n                        style={{\n                            margin: 20,\n                            marginLeft: 58,\n                            padding: 2,\n                            fontFamily: \"Times\",\n                        }}\n                    >\n                        {\" \"}\n                        {[\n                            {\n                                icon: nodeIcon,\n                                description: nodeMeanings,\n                                key: \"Node\",\n                            },\n                            {\n                                icon: linkIcon,\n                                description: linkDescription,\n                                key: \"Link\",\n                            },\n                        ].map(({ icon, description, key }, i) => {\n                            return (\n                                <div\n                                    key={key}\n                                    style={{\n                                        cursor: \"pointer\",\n                                    }}\n                                    onMouseEnter={(e) => {\n                                        e.currentTarget.style.backgroundColor =\n                                            \"#e9e9e9\"\n                                        visibleElements.forEach((e) => {\n                                            d3.select(e).attr(\"opacity\", 0.1)\n                                        })\n                                        graphDescriptions[i].elements.forEach(\n                                            (e) => {\n                                                d3.select(e).attr(\"opacity\", 1)\n                                            }\n                                        )\n                                    }}\n                                    onMouseLeave={(e) => {\n                                        e.currentTarget.style.backgroundColor =\n                                            \"#fff\"\n                                        visibleElements.forEach((e) => {\n                                            d3.select(e).attr(\"opacity\", 1)\n                                        })\n                                    }}\n                                >\n                                    {icon && (\n                                        <Icon\n                                            el={icon}\n                                            width={LEGENDS_ELEMENT_WIDTH}\n                                        />\n                                    )}\n                                    <span className=\"description-parameter entity-parameter\">\n                                        {key}\n                                    </span>\n                                    {\": \"}\n                                    <span\n                                        dangerouslySetInnerHTML={{\n                                            __html: description,\n                                        }}\n                                    ></span>\n                                </div>\n                            )\n                        })}\n                    </div>\n                ) : (\n                    <Loader\n                        style={{\n                            margin: 20,\n                            marginLeft: 58,\n                            padding: 2,\n                            fontFamily: \"Times\",\n                        }}\n                        state={\"Computing Linking Condition\"}\n                    ></Loader>\n                )}\n\n                <Divider\n                    orientation=\"left\"\n                    style={{\n                        fontSize: 20,\n                        fontFamily: \"Times\",\n                    }}\n                >\n                    Visual Encoding\n                </Divider>\n\n                <DescriptionsLegend\n                    data={data}\n                    elementInfo={elementInfo}\n                    entityElementsGroups={entityElementsGroups}\n                    loading={loading}\n                    graphDescriptions={graphDescriptions}\n                    visibleElements={visibleElements}\n                    loadingText={\"Computing Visual Encoding\"}\n                    SVG={SVG}\n                />\n                <Divider\n                    orientation=\"left\"\n                    style={{\n                        fontSize: 20,\n                        fontFamily: \"Times\",\n                    }}\n                >\n                    Layout Types\n                </Divider>\n                <div\n                    style={{\n                        margin: 20,\n                        marginLeft: 58,\n                        padding: 2,\n                        fontFamily: \"Times\",\n                    }}\n                >\n                    {layoutEncodings.isTopo && (\n                        <p>\n                            The layout is a topology-based layout. The farther\n                            the geodesic distance (the length of the shortest\n                            path) between two nodes, the farther the Euclidean\n                            distance between them.\n                        </p>\n                    )}\n                    {layoutEncodings.encodings.map((encoding) => {\n                        return (\n                            <div>\n                                <img\n                                    alt={`data/${dataFolder}/layout-indicator.svg`}\n                                    width={35}\n                                    height={35}\n                                    src={`data/${dataFolder}/layout-indicator.svg`}\n                                ></img>\n                                <span className=\"tooltip-attr\">\n                                    {encoding.key}\n                                </span>\n                                <span> → </span>\n                                {encoding.value.map((attr) => {\n                                    return (\n                                        <span className=\"tooltip-attr\">\n                                            {attr.indexOf(\"@\") !== -1\n                                                ? `${attr.split(\"@\")[0]}[${\n                                                      attr.split(\"@\")[1]\n                                                  }]`\n                                                : attr}\n                                        </span>\n                                    )\n                                })}\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport { DescriptionLegendPanel }\n","import React from \"react\"\nimport { Radio } from \"antd\"\n\nimport \"./Main.css\"\n\nimport { CodeEditorPanel } from \"./panels/CodeEditorPanel\"\nimport { DataEditorPanel } from \"./panels/DataEditorPanel\"\nimport { VisualizationPanel } from \"./panels/VisualizationPanel\"\nimport { VisualizationGivenDataPanel } from \"./panels/VisualizationGivenDataPanel\"\nimport { DescriptionPanel } from \"./panels/DescriptionPanel\"\nimport { getPreloadData } from \"./demo/demo\"\nimport { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router\"\nimport { linkCondition } from \"./linkConditions/linkCondition\"\nimport descriptor from \"./descriptor\"\nimport * as d3 from \"d3\"\nimport { object, svgToArray } from \"./descriptor/utils\"\nimport { TitleBar } from \"./components/TitleBar\"\nimport { styleParameter } from \"./utils/parameterStyle\"\nimport { DescriptionLegendPanel } from \"./panels/DescriptionLegendPanel\"\n\nconst DESCRIPTIONS = \"DESCRIPTIONS\"\nconst TOOLTIPS = \"TOOLTIPS\"\nconst LEGENDS = \"LEGENDS\"\nconst TECHNIQUES = [DESCRIPTIONS, LEGENDS, TOOLTIPS]\n\nfunction Main({ title, nodeMeanings }) {\n    const [runID, setRunID] = useState(0)\n    const [loading, setLoading] = useState(false)\n    const [dataStr, setDataStr] = useState(\"\")\n    const [codeStr, setCodeStr] = useState(\"\")\n    const [SVG, setSVG] = useState(document.createElement(\"svg\"))\n    const [visibleElements, setVisibleElements] = useState([])\n    const [graphDescripitons, setGraphDescriptions] = useState({})\n    const [layoutDescriptions, setLayoutDescriptions] = useState([])\n    const [elementInfo, setElementInfo] = useState(null)\n    const [label2Encodings, setLabel2Encodings] = useState(null)\n    const [linkConditions, setLinkConditions] = useState([])\n    const [entityElementsGroups, setEntityElementsGroups] = useState({})\n    const [techniqueChoice, setTechniqueChoice] = useState(DESCRIPTIONS)\n\n    // read url parameters\n    const { demo } = useParams()\n    const [dataFolder, setDataFolder] = useState(\"\")\n\n    useEffect(() => {\n        if (demo) {\n            console.log(demo)\n            getPreloadData(demo).then(\n                ({ dataStr, codeStr, preload, dataFolder }) => {\n                    setDataStr(dataStr)\n                    setCodeStr(codeStr)\n                    setDataFolder(dataFolder)\n\n                    if (preload) {\n                        const _ = document.createElement(\"div\")\n                        _.innerHTML = preload.svg\n                        const svg = _.firstChild\n                        setSVG(svg)\n                        // 根据index更新elements\n\n                        const allElements = svgToArray(svg)\n                        const descriptions = preload.descriptions\n                        const layoutDescriptions = preload.layoutDescriptions\n                        const elementInfo = preload.elementInfo\n                        const label2Encodings = preload.label2Encodings\n\n                        descriptions.forEach((description) => {\n                            object.dfs(description, (desc) => {\n                                // desc.elements = undefined\n                                if (desc.elementsIdx) {\n                                    desc.elements = desc.elementsIdx.map(\n                                        (idx) => allElements[idx]\n                                    )\n                                }\n                            })\n                        })\n\n                        layoutDescriptions.forEach((description) => {\n                            object.dfs(description, (desc) => {\n                                // desc.elements = undefined\n                                if (desc.elementsIdx) {\n                                    desc.elements = desc.elementsIdx.map(\n                                        (idx) => allElements[idx]\n                                    )\n                                }\n                            })\n                        })\n\n                        // setLoading(false)\n                        setVisibleElements(allElements)\n                        setGraphDescriptions(descriptions)\n                        setLayoutDescriptions(layoutDescriptions)\n                        setLabel2Encodings(label2Encodings)\n                        setElementInfo(elementInfo)\n                    }\n                }\n            )\n        }\n    }, [demo])\n\n    useEffect(() => {\n        if (runID === 0) return\n        // async function fetchEncodingDescriptions() {\n        function fetchEncodingDescriptions() {\n            try {\n                const data = JSON.parse(dataStr)\n                let {\n                    svg,\n                    allElements,\n                    descriptions,\n                    layoutDescriptions,\n                    elementInfo,\n                    label2Encodings,\n                    // } = await descriptor(codeStr, data)\n                } = descriptor(codeStr, data)\n\n                // ///////// 用来存储计算出来得数据 //////////\n                const svgStr = new XMLSerializer().serializeToString(svg)\n\n                descriptions.forEach((description) => {\n                    object.dfs(description, (desc) => {\n                        delete desc.elements\n                        desc.content = desc.template(\n                            ...desc.parameters.map(styleParameter)\n                        )\n                    })\n                })\n\n                layoutDescriptions.forEach((description) => {\n                    object.dfs(description, (desc) => {\n                        delete desc.elements\n                        desc.content = desc.template(\n                            ...desc.parameters.map(styleParameter)\n                        )\n                    })\n                })\n\n                const preloadData = {\n                    svg: svgStr,\n                    descriptions,\n                    layoutDescriptions,\n                    elementInfo,\n                    label2Encodings,\n                }\n                console.log(JSON.stringify(preloadData))\n                ///////// 计算代码结束 ////////\n\n                descriptions.forEach((description) => {\n                    object.dfs(description, (desc) => {\n                        desc.content = desc.template(\n                            ...desc.parameters.map(styleParameter)\n                        )\n                        if (desc.elementsIdx) {\n                            desc.elements = desc.elementsIdx.map(\n                                (idx) => allElements[idx]\n                            )\n                        }\n                    })\n                })\n\n                layoutDescriptions.forEach((description) => {\n                    object.dfs(description, (desc) => {\n                        desc.content = desc.template(\n                            ...desc.parameters.map(styleParameter)\n                        )\n                        if (desc.elementsIdx) {\n                            desc.elements = desc.elementsIdx.map(\n                                (idx) => allElements[idx]\n                            )\n                        }\n                    })\n                })\n\n                setSVG(svg)\n                setVisibleElements(allElements)\n                setGraphDescriptions(descriptions)\n                setLayoutDescriptions(layoutDescriptions)\n                setElementInfo(elementInfo)\n                setLabel2Encodings(label2Encodings)\n                setLoading(false)\n            } catch (e) {\n                console.error(\"invalid code or dataset.\")\n                console.error(e)\n            }\n        }\n        fetchEncodingDescriptions()\n    }, [runID])\n\n    useEffect(() => {\n        try {\n            const conditions = linkCondition(JSON.parse(dataStr), 0.8)\n            setLinkConditions(conditions)\n        } catch (e) {\n            console.error(\"Invalid dataset\")\n            setLinkConditions([])\n        }\n    }, [dataStr])\n\n    useEffect(() => {\n        if (SVG && elementInfo) {\n            const entityElementsGroups = { node: [], link: [] }\n            elementInfo.forEach((info) => {\n                if (\n                    info &&\n                    !entityElementsGroups[info.entityType][info.entityIndex]\n                ) {\n                    // get all elements related to this entity\n                    const newSvg = SVG.cloneNode(true)\n                    object.dfs(newSvg, function (element) {\n                        const _idx = parseInt(element.getAttribute(\"idx\"))\n                        if (!isNaN(_idx)) {\n                            const _info = elementInfo[_idx]\n                            if (\n                                !_info ||\n                                _info.entityIndex !== info.entityIndex ||\n                                _info.entityType !== info.entityType\n                            ) {\n                                element.remove()\n                            }\n                        }\n                    })\n                    document.body.appendChild(newSvg)\n                    const bbox = newSvg.getBBox()\n                    document.body.removeChild(newSvg)\n                    const entityElementsGroup = document.createElement(\"g\")\n                    Array.from(newSvg.children).forEach((child) => {\n                        entityElementsGroup.appendChild(child)\n                    })\n\n                    entityElementsGroups[info.entityType][info.entityIndex] = {\n                        group: entityElementsGroup,\n                        bbox,\n                    }\n                }\n            })\n            Object.keys(entityElementsGroups).forEach((key) => {\n                entityElementsGroups[key].maxBBox = entityElementsGroups[\n                    key\n                ].reduce(\n                    (r, e) => {\n                        r.width = Math.max(r.width, e.bbox.width)\n                        r.height = Math.max(r.height, e.bbox.height)\n                        return r\n                    },\n                    { width: 0, height: 0 }\n                )\n            })\n\n            setEntityElementsGroups(entityElementsGroups)\n        }\n    }, [SVG, elementInfo])\n\n    if (dataStr) {\n        const data = JSON.parse(dataStr)\n        // console.log(data)\n        // console.log(graphDescripitons)\n    }\n\n    return (\n        <div style={{}}>\n            <TitleBar text={title} />\n            <div\n                style={{\n                    width: \"95vw\",\n                    minWidth: 1400,\n                    // position: \"absolute\",\n                    // left: \"50%\",\n                    // transform: \"translate(-50%)\",\n                    marginTop: 70,\n                    paddingLeft: \"2.5vw\",\n                    paddingBottom: 70,\n                    // height: \"calc(100vh - 80px)\",\n                    display: \"flex\",\n                    flexDirection: \"raw\",\n                }}\n            >\n                <div\n                    id=\"left-container\"\n                    style={{\n                        flex: 1.2,\n                        height: \"95vh\",\n                        overflowY: \"scroll\",\n                        position: \"relative\",\n                    }}\n                >\n                    <div\n                        style={{\n                            float: \"right\",\n                            marginRight: 310,\n                        }}\n                    >\n                        <Radio.Group\n                            style={{ position: \"fixed\", zIndex: 1000 }}\n                            options={TECHNIQUES.map((t) => ({\n                                label: t,\n                                value: t,\n                            }))}\n                            onChange={(e) => setTechniqueChoice(e.target.value)}\n                            value={techniqueChoice}\n                            optionType=\"button\"\n                        />\n                    </div>\n                    <VisualizationGivenDataPanel\n                        style={{\n                            margin: 5,\n                        }}\n                        dataFolder={dataFolder}\n                        svg={SVG}\n                        dataStr={dataStr}\n                        elementInfo={elementInfo}\n                        layoutDescriptions={layoutDescriptions}\n                        label2Encodings={label2Encodings}\n                        linkConditions={linkConditions}\n                        entityElementsGroups={entityElementsGroups}\n                        visibleElements={visibleElements}\n                        nodeMeanings={nodeMeanings}\n                        switchedOn={techniqueChoice === TOOLTIPS}\n                    />\n                    <CodeEditorPanel\n                        codeStr={codeStr}\n                        setCodeStr={setCodeStr}\n                        submit={() => {\n                            setLoading(true)\n                            setRunID(runID + 1)\n                        }}\n                        style={{}}\n                    />\n                    <DataEditorPanel\n                        dataStr={dataStr}\n                        setDataStr={setDataStr}\n                        style={{}}\n                    />\n                </div>\n                <div\n                    id=\"right-container\"\n                    style={{\n                        flex: 0.8,\n                        height: \"95vh\",\n                        overflowY: \"scroll\",\n                        display: `${\n                            techniqueChoice === LEGENDS ||\n                            techniqueChoice === DESCRIPTIONS\n                                ? \"\"\n                                : \"none\"\n                        }`,\n                    }}\n                >\n                    <DescriptionLegendPanel\n                        dataFolder={dataFolder}\n                        dataStr={dataStr}\n                        elementInfo={elementInfo}\n                        loading={loading}\n                        linkConditions={linkConditions}\n                        graphDescriptions={graphDescripitons}\n                        layoutDescriptions={layoutDescriptions}\n                        entityElementsGroups={entityElementsGroups}\n                        visibleElements={visibleElements}\n                        nodeMeanings={nodeMeanings}\n                        SVG={SVG}\n                        switchedOn={techniqueChoice === LEGENDS}\n                    />\n                    <DescriptionPanel\n                        loading={loading}\n                        linkConditions={linkConditions}\n                        graphDescriptions={graphDescripitons}\n                        layoutDescriptions={layoutDescriptions}\n                        visibleElements={visibleElements}\n                        nodeMeanings={nodeMeanings}\n                        switchedOn={techniqueChoice === DESCRIPTIONS}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport { Main }\n","/* eslint-disable no-loop-func */\n/**\n * @create date 2021-02-20 13:08:16\n * @modify date 2021-02-20 13:08:16\n * @desc entry of the repo\n */\nimport * as d3 from \"d3\"\nimport { mapEntity2Element, mapAttribute2Channel } from \"./entity2element\"\nimport { NLDComponents } from \"./NLDComponents\"\nimport {\n    BASIC_SVG_ELEMENTS,\n    COMMON_STYLE_CHANNELS,\n    COMMON_POSITION_CHANNELS,\n    DESCRIPTION_TEMPLATE,\n    PARAMETER_TYPE,\n} from \"./global\"\nimport {\n    NoLinDiagram,\n    number2ordinal,\n    object,\n    textualizeStringArray,\n} from \"./utils\"\nimport {\n    attributeRelation,\n    layoutRelation,\n} from \"../attributeRelation/attributeRelation\"\nimport { BACKEND_URL } from \"../configs\"\n\n/**\n *\n * @param {string} code\n * @param {standard node-link data format} data\n */\n// export default async function descriptor(code, oridata) {\nexport default function descriptor(code, oridata, threshold = 0.6) {\n    // only keep string number undefined boolean array\n    const data = object.deepcopy(oridata)\n    const beginTime = performance.now()\n    // eslint-disable-next-line no-new-func\n    const func = new Function(\"d3\", \"data\", code)\n    const svg = func(d3, object.deepcopy(data))\n    const nldComponents = new NLDComponents(svg)\n\n    // Step1: Map Entities to Elements, Map Attributes to Channels\n    // entity2element: [[entityIndex]: Set(elementIndex)]\n    console.log(\n        `%c Computing nodes' encodings...`,\n        \"background: #222; color: #bada55\"\n    )\n    console.log(\n        `%c Computing links' encodings...`,\n        \"background: #222; color: #bada55\"\n    )\n\n    let [node2element, nodeElement2label] = mapEntity2Element(\n        data,\n        func,\n        \"nodes\"\n    )\n\n    let [link2element, linkElement2label] = mapEntity2Element(\n        data,\n        func,\n        \"links\"\n    )\n\n    // Step2: Remove Links' elements from node results\n    // if link2element shares same elements with node2element,\n    // we should remove them from node2element\n    const element2link = []\n    for (let i = 0; i < link2element.length; i++) {\n        link2element[i]?.forEach((elementIndex) => {\n            if (element2link[elementIndex] !== undefined) {\n                // one element cannot correspond to several links\n                debugger\n            }\n            element2link[elementIndex] = i\n        })\n    }\n\n    // Remove link2element from node2element\n    for (let i = 0; i < node2element.length; i++) {\n        // i: nodeIndex\n        const node2element_i = new Set()\n        node2element[i]?.forEach((elementIndex) => {\n            if (element2link[elementIndex] === undefined) {\n                // the element does not correspond to a link, add it to node2element\n                node2element_i.add(elementIndex)\n            } else {\n                delete nodeElement2label[elementIndex]\n            }\n        })\n        node2element[i] = node2element_i\n    }\n\n    let linkElements = new Set()\n    link2element.forEach((linkset) => {\n        linkset.forEach((elementIndex) => {\n            linkElements.add(elementIndex)\n        })\n    })\n\n    node2element.forEach((nodeset) => {\n        nodeset.forEach((elementIndex) => {\n            if (linkElements.has(elementIndex)) {\n                debugger\n            }\n        })\n    })\n\n    // const nodeLabel2attr2diff = await mapAttribute2Channel(\n    const nodeLabel2attr2diff = mapAttribute2Channel(\n        data,\n        func,\n        \"nodes\",\n        node2element,\n        nodeElement2label\n    )\n\n    // const linkLabel2attr2diff = await mapAttribute2Channel(\n    const linkLabel2attr2diff = mapAttribute2Channel(\n        data,\n        func,\n        \"links\",\n        link2element,\n        linkElement2label\n    )\n\n    // Step3: Generate Descriptions about Visual Encodings\n    let descriptions = []\n    const configs = [\n        {\n            entityType: \"node\",\n            entity2element: node2element,\n            element2label: nodeElement2label,\n            label2attr2diff: nodeLabel2attr2diff,\n        },\n        {\n            entityType: \"link\",\n            entity2element: link2element,\n            element2label: linkElement2label,\n            label2attr2diff: linkLabel2attr2diff,\n        },\n    ]\n    console.log(configs)\n    configs.forEach(\n        ({ entityType, entity2element, element2label, label2attr2diff }) => {\n            // Step3.1: Generate Constituents, e.g. A node can consist of 4 elements\n            // const numberOfElementsEachEntity = entity2element[0].size\n            let numberOfLabels = Object.keys(label2attr2diff).length\n            // find related elements: all elements of nodes/links are related\n            let relatedElements = []\n            let relatedElementsIdx = []\n            entity2element.forEach((elementSet) => {\n                if (elementSet) {\n                    elementSet.forEach((elementIndex) => {\n                        relatedElementsIdx.push(elementIndex)\n                        relatedElements.push(\n                            nldComponents.basicElementArray[elementIndex]\n                                .element\n                        )\n                    })\n                }\n            })\n\n            let descrpitionSentence = {\n                template: DESCRIPTION_TEMPLATE.constituent(\n                    entityType,\n                    numberOfLabels\n                ),\n                parameters: [\n                    {\n                        type: PARAMETER_TYPE.entity,\n                        value: entityType,\n                    },\n                    {\n                        type: PARAMETER_TYPE.value,\n                        value: numberOfLabels,\n                    },\n                ],\n                elements: relatedElements,\n                elementsIdx: relatedElementsIdx,\n                switch: true,\n                children: [],\n            }\n\n            descriptions.push(descrpitionSentence)\n\n            // Step3.2: Vertical Grouping\n            const classes = {}\n            const label2class = {}\n            for (let label in label2attr2diff) {\n                const attr2diff = label2attr2diff[label]\n                const className = JSON.stringify(attr2diff)\n                classes[className] = classes[className] ?? new Set()\n                classes[className].add(label)\n                label2class[label] = className\n            }\n\n            // Step3.3: Generate Encoding Descriptions for each Category\n            let i = 1\n            for (let label in label2attr2diff) {\n                const relatedElementsIdx = element2label\n                    .map((l, eleIndex) => {\n                        // eslint-disable-next-line eqeqeq\n                        if (l == label) {\n                            return eleIndex\n                        } else {\n                            return undefined\n                        }\n                    })\n                    .filter((_) => _ !== undefined)\n                const relatedElements = element2label\n                    .map((l, eleIndex) => {\n                        // eslint-disable-next-line eqeqeq\n                        if (l == label) {\n                            return nldComponents.basicElementArray[eleIndex]\n                                .element\n                        } else {\n                            return undefined\n                        }\n                    })\n                    .filter((_) => _)\n\n                const attr2diff = label2attr2diff[label]\n                let tagNames = Array.from(\n                    new Set(\n                        element2label\n                            .map((l, eleIndex) => {\n                                // eslint-disable-next-line eqeqeq\n                                if (l == label) {\n                                    return nldComponents.basicElementArray[\n                                        eleIndex\n                                    ].tagName\n                                } else {\n                                    return undefined\n                                }\n                            })\n                            .filter((_) => _)\n                    )\n                ).sort()\n\n                if (tagNames.length === 1) {\n                    const elementDescription = {\n                        template:\n                            DESCRIPTION_TEMPLATE.onePrimitive(numberOfLabels), // e.g., The first element is a rect\n                        parameters: [\n                            number2ordinal(i),\n                            {\n                                type: PARAMETER_TYPE.element,\n                                value: `&lt;${tagNames[0]}&gt;`,\n                            },\n                        ],\n                        elements: relatedElements,\n                        elementsIdx: relatedElementsIdx,\n                        switch: true,\n                        children: [],\n                    }\n                    descrpitionSentence.children.push(elementDescription)\n\n                    elementDescription.children = genDescsForAttr2Diff(\n                        Object.entries(attr2diff),\n                        relatedElements,\n                        relatedElementsIdx\n                    )\n                    console.log(attr2diff)\n                    console.log(elementDescription)\n                } else if (tagNames.length > 1) {\n                    const tagNameChoiceDescriptions = {\n                        template:\n                            DESCRIPTION_TEMPLATE.multiPrimitive(numberOfLabels),\n                        parameters: [\n                            number2ordinal(i),\n                            {\n                                type: PARAMETER_TYPE.element,\n                                value: tagNames.map(\n                                    (tagName) => `&lt;${tagName}&gt;`\n                                ),\n                            },\n                        ],\n                        elements: relatedElements,\n                        elementsIdx: relatedElementsIdx,\n                        switch: true,\n                        children: [],\n                    }\n                    descrpitionSentence.children.push(tagNameChoiceDescriptions)\n\n                    const tagName2attr2val = {}\n                    const attr2diffEntriesWithCommonStyle = Object.entries(\n                        attr2diff\n                    ).reduce((result, [attrName, diff]) => {\n                        if (diff.tagName) {\n                            if (diff.tagName.typeX === \"categorical\") {\n                                for (let tagName in diff.tagName\n                                    .attributeMapping) {\n                                    tagName2attr2val[tagName] =\n                                        tagName2attr2val[tagName] ?? {\n                                            attrName,\n                                        }\n                                    tagName2attr2val[tagName].attrVal =\n                                        tagName2attr2val[tagName].attrVal ??\n                                        new Set()\n                                    diff.tagName.attributeMapping[\n                                        tagName\n                                    ].forEach((val) => {\n                                        tagName2attr2val[tagName].attrVal.add(\n                                            val\n                                        )\n                                    })\n                                }\n                            } else {\n                                for (let tagName in diff.tagName\n                                    .attributeMapping) {\n                                    tagName2attr2val[tagName] =\n                                        tagName2attr2val[tagName] ?? {\n                                            attrName,\n                                        }\n                                    tagName2attr2val[tagName].attrVal =\n                                        tagName2attr2val[tagName].attrVal ?? {\n                                            max: -Infinity,\n                                            min: Infinity,\n                                        }\n                                    tagName2attr2val[tagName].attrVal.max =\n                                        Math.max(\n                                            tagName2attr2val[tagName].attrVal\n                                                .max,\n                                            Number(\n                                                diff.tagName.attributeMapping\n                                                    .max\n                                            )\n                                        )\n                                    tagName2attr2val[tagName].attrVal.min =\n                                        Math.min(\n                                            tagName2attr2val[tagName].attrVal\n                                                .min,\n                                            Number(\n                                                diff.tagName.attributeMapping\n                                                    .min\n                                            )\n                                        )\n                                }\n                            }\n                        }\n                        const commonStyleDiff = {}\n                        if (diff.style) {\n                            for (let channel in diff.style) {\n                                if (\n                                    COMMON_STYLE_CHANNELS.has(channel) &&\n                                    diff.style[channel]\n                                ) {\n                                    commonStyleDiff.style =\n                                        commonStyleDiff.style ?? {}\n                                    commonStyleDiff.style[channel] =\n                                        diff.style[channel]\n                                }\n                            }\n                        }\n                        if (Object.keys(commonStyleDiff).length) {\n                            result.push([attrName, commonStyleDiff])\n                        }\n                        // if (!diff.tagName) {\n                        //     if (diff.style) {\n                        //         const _diff = {}\n                        //         for (let channel in diff.style) {\n                        //             if (COMMON_STYLE_CHANNELS.has(channel)) {\n                        //                 _diff.style = _diff.style ?? {}\n                        //                 _diff.style[channel] = true\n                        //             }\n                        //         }\n                        //         if (_diff.style) {\n                        //             result.push([attrName, _diff])\n                        //         }\n                        //     }\n                        // } else {\n                        //     result.push([attrName, { tagName: true }])\n                        // }\n                        return result\n                    }, [])\n\n                    // attr2diffEntriesWithCommonStyle.forEach(\n                    //     ([attrName, diff]) => {\n                    //         const channels = []\n                    //         if (diff.tagName) {\n                    //             channels.push(\"tagName\")\n                    //         }\n                    //         if (diff.style) {\n                    //             Object.entries(diff.style).forEach(\n                    //                 ([channel, bool]) => {\n                    //                     if (bool) {\n                    //                         channels.push(\n                    //                             `\"${channel.split(\".\")[0]}\"`\n                    //                         )\n                    //                     }\n                    //                 }\n                    //             )\n                    //         }\n                    //         descrpitionSentence.children.push({\n                    //             template: DESCRIPTION_TEMPLATE.channels2attribute(),\n                    //             parameters: [channels, attrName],\n                    //             elements: relatedElements,\n                    //             switch: false,\n                    //             children: [],\n                    //         })\n                    //     }\n                    // )\n                    genDescsForAttr2Diff(\n                        attr2diffEntriesWithCommonStyle,\n                        relatedElements,\n                        relatedElementsIdx\n                    ).forEach((desc) => {\n                        descrpitionSentence.children.push(desc)\n                    })\n\n                    tagNames.forEach((tagName) => {\n                        const thisTagNameRelatedElements =\n                            relatedElements.filter(\n                                (element) => element.tagName === tagName\n                            )\n                        const thisTagNameRelatedElementsIdx =\n                            relatedElementsIdx.filter(\n                                (idx, i) =>\n                                    relatedElements[i].tagName === tagName\n                            )\n                        // TODO: tagName2attr2val\n                        // multiPrimitiveTagName: (attrName, attrVals, tagName) => {}\n                        const valueArrayOfAttributesControlsThisTag =\n                            \"max\" in tagName2attr2val[tagName].attrVal &&\n                            \"min\" in tagName2attr2val[tagName].attrVal\n                                ? [\n                                      tagName2attr2val[tagName].attrVal.min,\n                                      tagName2attr2val[tagName].attrVal.max,\n                                  ]\n                                : Array.from(tagName2attr2val[tagName].attrVal)\n                        const thisTagNameDescriptions = {\n                            template:\n                                DESCRIPTION_TEMPLATE.multiPrimitiveTagName(\n                                    tagName2attr2val[tagName].attrVal\n                                ),\n                            parameters: [\n                                {\n                                    // tagName\n                                    type: PARAMETER_TYPE.element,\n                                    value: `&lt;${tagName}&gt;`,\n                                },\n                                {\n                                    // attrName\n                                    type: PARAMETER_TYPE.attribute,\n                                    value: tagName2attr2val[tagName].attrName,\n                                },\n                                ...valueArrayOfAttributesControlsThisTag.map(\n                                    (value) => ({\n                                        // attrVal\n                                        type: PARAMETER_TYPE.value,\n                                        value,\n                                    })\n                                ),\n                            ],\n                            elements: thisTagNameRelatedElements,\n                            elementsIdx: thisTagNameRelatedElementsIdx,\n                            switch: true,\n                            children: [],\n                        }\n\n                        tagNameChoiceDescriptions.children.push(\n                            thisTagNameDescriptions\n                        )\n\n                        const attr2diffEntriesWithThisTag = Object.entries(\n                            attr2diff\n                        ).reduce((result, [attrName, diff]) => {\n                            const thisTagDiff = {}\n                            if (diff.style) {\n                                for (let channel in diff.style) {\n                                    if (channel.split(\".\")[1] === tagName) {\n                                        channel = channel.split(\".\")[0]\n                                    }\n                                    if (\n                                        BASIC_SVG_ELEMENTS.get(tagName).has(\n                                            channel\n                                        ) &&\n                                        !COMMON_STYLE_CHANNELS.has(channel)\n                                    ) {\n                                        thisTagDiff.style =\n                                            thisTagDiff.style ?? {}\n                                        thisTagDiff.style[channel] =\n                                            diff.style[channel]\n                                    }\n                                }\n                            }\n                            if (Object.keys(thisTagDiff).length) {\n                                result.push([attrName, thisTagDiff])\n                            }\n                            // if (!diff.tagName) {\n                            //     if (diff.style) {\n                            //         const _diff = {}\n                            //         for (let channel in diff.style) {\n                            //             if (channel.split(\".\")[1] === tagName) {\n                            //                 channel = channel.split(\".\")[0]\n                            //             }\n                            //             if (\n                            //                 BASIC_SVG_ELEMENTS.get(tagName).has(\n                            //                     channel\n                            //                 ) &&\n                            //                 !COMMON_STYLE_CHANNELS.has(channel)\n                            //             ) {\n                            //                 _diff.style = _diff.style ?? {}\n                            //                 _diff.style[channel] = true\n                            //             }\n                            //             // if (\n                            //             //     [\n                            //             //         COMMON_POSITION_CHANNELS.get(\n                            //             //             tagName\n                            //             //         ),\n                            //             //         BASIC_SVG_ELEMENTS.get(tagName),\n                            //             //     ].some(\n                            //             //         (channels) =>\n                            //             //             channels.has(channel) ||\n                            //             //             (channel.split(\".\")[1] ==\n                            //             //                 tagName &&\n                            //             //                 channels.has(\n                            //             //                     channel.split(\n                            //             //                         \".\"\n                            //             //                     )[0]\n                            //             //                 ))\n                            //             //     )\n                            //             // ) {\n                            //             //     _diff.style = _diff.style ?? {}\n                            //             //     _diff.style[channel] = true\n                            //             // }\n                            //         }\n                            //         if (_diff.style) {\n                            //             result.push([attrName, _diff])\n                            //         }\n                            //     }\n                            // }\n                            return result\n                        }, [])\n\n                        thisTagNameDescriptions.children = genDescsForAttr2Diff(\n                            attr2diffEntriesWithThisTag,\n                            thisTagNameRelatedElements,\n                            thisTagNameRelatedElementsIdx\n                        )\n                        // attr2diffEntriesWithThisTag.forEach(\n                        //     ([attrName, diff], j) => {\n                        //         const channels = []\n                        //         if (diff.style) {\n                        //             Object.entries(diff.style).forEach(\n                        //                 ([channel, bool]) => {\n                        //                     if (bool) {\n                        //                         channels.push(\n                        //                             `\"${channel.split(\".\")[0]}\"`\n                        //                         )\n                        //                     }\n                        //                 }\n                        //             )\n                        //         }\n                        //         thisTagNameDescriptions.children.push({\n                        //             template: DESCRIPTION_TEMPLATE.channels2attribute(\n                        //                 /*isfirstWordUpper*/ j !== 0\n                        //             ),\n                        //             parameters: [channels, attrName],\n                        //             elements: thisTagNameRelatedElements,\n                        //             switch: false,\n                        //             children: [],\n                        //         })\n                        //     }\n                        // )\n                    })\n                }\n\n                i++\n            }\n        }\n    )\n\n    console.log(descriptions)\n\n    function genDescsForAttr2Diff(\n        attr2diffEntries,\n        relatedElements,\n        relatedElementsIdx\n    ) {\n        const result = []\n        attr2diffEntries.forEach(([attrName, diff]) => {\n            const channels = []\n            if (diff.tagName) {\n                channels.push(\"tagName\")\n            }\n            if (diff.style) {\n                Object.entries(diff.style).forEach(([channel, bool]) => {\n                    if (bool) {\n                        channels.push(`${channel.split(\".\")[0]}`)\n                    }\n                })\n            }\n\n            // Generate correlations\n            channels.forEach((channel) => {\n                let relation\n                if (channel === \"tagName\") {\n                    relation = diff.tagName\n                } else {\n                    relation = diff.style[channel]\n                }\n\n                let encodingDetailDescription = {\n                    template: DESCRIPTION_TEMPLATE.channels2attribute(), // Its fill encodes the attribute xxx.\n                    parameters: [\n                        {\n                            type: PARAMETER_TYPE.channel,\n                            value: [channel],\n                        },\n                        {\n                            type: PARAMETER_TYPE.attribute,\n                            value: attrName,\n                        },\n                    ],\n                    elements: relatedElements,\n                    elementsIdx: relatedElementsIdx,\n                    switch: false,\n                    children: [],\n                }\n                if (relation && relation !== true) {\n                    // For numerical to numerical: describe the kendall test\n                    if (\n                        relation.typeX === \"numerical\" &&\n                        relation.typeY === \"numerical\" &&\n                        // relation.kendall.pvalue <= 0.05\n                        Math.abs(relation.correlation) > threshold\n                    ) {\n                        // more...more...\n                        encodingDetailDescription.children.push({\n                            template: DESCRIPTION_TEMPLATE.correlationN2N(\n                                // relation.pearson.correlation > 0\n                                relation.correlation > 0\n                            ), // Its fill encodes the attribute xxx.\n                            parameters: [\n                                {\n                                    type: PARAMETER_TYPE.channel,\n                                    value: channel,\n                                },\n                                {\n                                    type: PARAMETER_TYPE.attribute,\n                                    value: attrName,\n                                },\n                            ],\n                            elements: relatedElements,\n                            elementsIdx: relatedElementsIdx,\n                        })\n                    } else if (\n                        relation.typeX === \"numerical\" &&\n                        relation.typeY === \"categorical\"\n                    ) {\n                        Object.entries(relation.attributeMapping).forEach(\n                            ([chanVal, attrVals]) => {\n                                encodingDetailDescription.children.push({\n                                    template:\n                                        DESCRIPTION_TEMPLATE.correlationN2C, // `When the value of the attribute ${attrName} is from ... to ..., its ${chanName} turns to ${chanVal}.`\n                                    parameters: [\n                                        {\n                                            type: PARAMETER_TYPE.channel,\n                                            value: channel,\n                                        },\n                                        {\n                                            type: PARAMETER_TYPE.attribute,\n                                            value: attrName,\n                                        },\n                                        {\n                                            type: PARAMETER_TYPE.value,\n                                            value: chanVal,\n                                        },\n                                        {\n                                            type: PARAMETER_TYPE.value,\n                                            value: attrVals.min,\n                                        },\n                                        {\n                                            type: PARAMETER_TYPE.value,\n                                            value: attrVals.max,\n                                        },\n                                    ],\n                                    elements: relatedElements.filter(\n                                        (element) => {\n                                            if (channel !== \"tagName\") {\n                                                if (channel === \"textContent\") {\n                                                    return (\n                                                        element.textContent ===\n                                                        chanVal\n                                                    )\n                                                }\n                                                return (\n                                                    element.attributes[channel]\n                                                        .value == chanVal\n                                                )\n                                            } else {\n                                                return (\n                                                    element.tagName == chanVal\n                                                )\n                                            }\n                                        }\n                                    ),\n                                    elementsIdx: relatedElementsIdx.filter(\n                                        (idx, i) => {\n                                            if (channel !== \"tagName\") {\n                                                if (channel === \"textContent\") {\n                                                    return (\n                                                        relatedElements[i]\n                                                            .textContent ===\n                                                        chanVal\n                                                    )\n                                                }\n                                                return (\n                                                    relatedElements[i]\n                                                        .attributes[channel]\n                                                        .value == chanVal\n                                                )\n                                            } else {\n                                                return (\n                                                    relatedElements[i]\n                                                        .tagName == chanVal\n                                                )\n                                            }\n                                        }\n                                    ),\n                                })\n                            }\n                        )\n                    } else if (\n                        relation.typeX === \"categorical\" &&\n                        relation.typeY === \"categorical\" &&\n                        relation.attributeMapping\n                    ) {\n                        Object.entries(relation.attributeMapping).forEach(\n                            ([chanVal, attrVals]) => {\n                                encodingDetailDescription.children.push({\n                                    template:\n                                        DESCRIPTION_TEMPLATE.correlationC2C, // `When the value of the attribute ${attrName} is ${textualizeStringArray( attrVals, \"or\" )}, its ${chanName} turns to ${chanVal}.`\n                                    parameters: [\n                                        {\n                                            type: PARAMETER_TYPE.channel,\n                                            value: channel,\n                                        },\n                                        {\n                                            type: PARAMETER_TYPE.attribute,\n                                            value: attrName,\n                                        },\n                                        {\n                                            type: PARAMETER_TYPE.value,\n                                            value: chanVal,\n                                        },\n                                        {\n                                            type: PARAMETER_TYPE.value,\n                                            value: attrVals,\n                                        },\n                                    ],\n                                    elements: relatedElements.filter(\n                                        (element) => {\n                                            if (channel !== \"tagName\") {\n                                                if (channel === \"textContent\") {\n                                                    return (\n                                                        element.textContent ===\n                                                        chanVal\n                                                    )\n                                                } else {\n                                                    return (\n                                                        element.attributes[\n                                                            channel\n                                                        ].value === chanVal\n                                                    )\n                                                }\n                                            } else {\n                                                return (\n                                                    element.tagName === chanVal\n                                                )\n                                            }\n                                        }\n                                    ),\n                                    elementsIdx: relatedElementsIdx.filter(\n                                        (idx, i) => {\n                                            if (channel !== \"tagName\") {\n                                                if (channel === \"textContent\") {\n                                                    return (\n                                                        relatedElements[i]\n                                                            .textContent ===\n                                                        chanVal\n                                                    )\n                                                } else {\n                                                    return (\n                                                        relatedElements[i]\n                                                            .attributes[channel]\n                                                            .value === chanVal\n                                                    )\n                                                }\n                                            } else {\n                                                return (\n                                                    relatedElements[i]\n                                                        .tagName === chanVal\n                                                )\n                                            }\n                                        }\n                                    ),\n                                })\n                            }\n                        )\n                    }\n                }\n\n                if (encodingDetailDescription.children.length == 0) {\n                    encodingDetailDescription.children.push({\n                        template: DESCRIPTION_TEMPLATE.correlationUndefined, // `However, the correlation between ${channel} and ${attrName} are not determined yet.`\n                        parameters: [\n                            {\n                                type: PARAMETER_TYPE.channel,\n                                value: channel,\n                            },\n                            {\n                                type: PARAMETER_TYPE.attribute,\n                                value: attrName,\n                            },\n                        ],\n                        elements: relatedElements,\n                        elementsIdx: relatedElementsIdx,\n                    })\n                }\n\n                result.push(encodingDetailDescription)\n            })\n            // For numerical to categorical:\n            // For categorical to categorical:\n        })\n        return result\n    }\n\n    // Step4: Detect Layout Meanings\n    // Step4.1: Generate x/y positions for each node\n    const nodeAttrs = Array.from(\n        NoLinDiagram.getAttributesOf(data).nodes.entries()\n    ) //! should before position computing\n\n    document.body.appendChild(svg)\n    const svgBBox = svg.getBoundingClientRect()\n    node2element.forEach((elementIndexSet, entityIndex) => {\n        const elements = Array.from(elementIndexSet).map(\n            (elementIndex) =>\n                nldComponents.basicElementArray[elementIndex].element\n        )\n\n        const min = {\n            x: Infinity,\n            y: Infinity,\n        }\n        const max = {\n            x: -Infinity,\n            y: -Infinity,\n        }\n\n        elements.forEach((element) => {\n            const box = element.getBoundingClientRect()\n            const x = box.x - svgBBox.x\n            const y = box.y - svgBBox.y\n            min.x = Math.min(min.x, x + box.width / 2)\n            max.x = Math.max(max.x, x + box.width / 2)\n\n            min.y = Math.min(min.y, y + box.height / 2)\n            max.y = Math.max(max.y, y + box.height / 2)\n        })\n\n        data.nodes[entityIndex].x = (max.x + min.x) / 2\n        data.nodes[entityIndex].y = (max.y + min.y) / 2\n    })\n    document.body.removeChild(svg)\n    const endTime = performance.now()\n    console.log(\"Computing time:\", endTime - beginTime, \"ms\")\n\n    const allElements = nldComponents.basicElementArray.map((_) => _.element)\n    // add idx to element\n    allElements.forEach((el, i) => {\n        el.setAttribute(\"idx\", i)\n    })\n    const allElementsIdx = new Array(nldComponents.basicElementArray.length)\n        .fill()\n        .map((_, i) => i)\n    const xs = data.nodes.map((n) => n.x)\n    const ys = data.nodes.map((n) => n.y)\n    const xAttrs = []\n    const yAttrs = []\n\n    for (let i = 0; i < nodeAttrs.length; i++) {\n        const attrName = nodeAttrs[i][0]\n        // const CONNECTOR = \"@\"\n        let attrVals = nodeAttrs[i][1].range\n        // if (attrName.indexOf(CONNECTOR) > 0) {\n        //     attrVals = data.nodes.map(\n        //         (n) =>\n        //             n[attrName.split(CONNECTOR)[0]][\n        //                 attrName.split(CONNECTOR)[1]\n        //             ]\n        //     )\n        // } else {\n        //     attrVals = data.nodes.map((n) => n[attrName])\n        // }\n\n        // console.log(i, nodeAttrs.length, attrName, attrVals)\n        // const xRelation = await attributeRelation(xs, attrVals)\n        const xRelation = attributeRelation(xs, attrVals)\n        // if (xRelation?.pearson?.pvalue <= 0.05) {\n        if (Math.abs(xRelation?.correlation) > threshold) {\n            // console.log(attrName, \"x\")\n            xAttrs.push({\n                name: attrName,\n                // type: xRelation?.pearson?.correlation > 0,\n                type: xRelation?.correlation > 0,\n            })\n        }\n        // const yRelation = await attributeRelation(ys, attrVals)\n        const yRelation = attributeRelation(ys, attrVals)\n        // if (yRelation?.pearson?.pvalue <= 0.05) {\n        if (Math.abs(yRelation?.correlation) > threshold) {\n            // console.log(attrName, \"y\")\n            yAttrs.push({\n                name: attrName,\n                // type: yRelation?.pearson?.correlation > 0,\n                type: yRelation?.correlation > 0,\n            })\n        }\n    }\n\n    // console.log(xAttrs, yAttrs)\n    const layoutDescriptions = []\n    if (xAttrs.length > 0 && yAttrs.length > 0) {\n        // attribute-layout\n        ;[\n            { axis: \"x\", attrs: xAttrs },\n            { axis: \"y\", attrs: yAttrs },\n        ].forEach(({ axis, attrs }) => {\n            layoutDescriptions.push({\n                template: (axis, attrNames) => {\n                    return `The ${axis}-coordinates encodes ${\n                        attrNames.length > 1 ? \"\" : \"the\"\n                    } attribute${\n                        attrNames.length > 1 ? \"\" : \"s\"\n                    } ${textualizeStringArray(attrNames)}`\n                },\n                parameters: [\n                    {\n                        type: PARAMETER_TYPE.channel,\n                        value: axis,\n                    },\n                    {\n                        type: PARAMETER_TYPE.attribute,\n                        value: attrs.map((_) => _.name),\n                    },\n                ],\n                elements: [],\n                elementsIdx: [],\n                children: attrs.map((attr) => ({\n                    template: (axis, attrName) => {\n                        return `The greater the ${attrName} is, the ${\n                            attr.type ? \"greater📈\" : \"smaller📉\"\n                        } the ${axis}-coordinate is.`\n                    },\n                    parameters: [\n                        {\n                            type: PARAMETER_TYPE.channel,\n                            value: axis,\n                        },\n                        {\n                            type: PARAMETER_TYPE.attribute,\n                            value: attr.name,\n                        },\n                    ],\n                    elements: allElements,\n                    elementsIdx: allElementsIdx,\n                })),\n            })\n        })\n    }\n\n    // // topology-layout\n    // const correlation = await fetch(BACKEND_URL + \"layout-correlation\", {\n    //     method: \"POST\",\n    //     headers: {\n    //         \"Content-Type\": \"application/json\",\n    //     },\n    //     body: JSON.stringify(data),\n    // }).then((res) => res.json())\n    const correlation = layoutRelation(data)\n\n    if (Math.abs(correlation) > 0.3) {\n        layoutDescriptions.push({\n            template: () => {\n                // return `The layout is a topology-based layout, which means the farther the topology distance between two nodes, the farther the distance between them.`\n                return `The layout is a topology-based layout, the farther the geodesic distance (the length of the shortest path) between two nodes, the farther the Euclidean distance between them.`\n            },\n            parameters: [],\n            elements: allElements,\n            elementsIdx: allElementsIdx,\n        })\n    } else if (xAttrs.length === 0 && yAttrs.length === 0) {\n        layoutDescriptions.push({\n            template: () => {\n                return `The layout is neither an attribute-based layout nor a topology-based layout.`\n            },\n            parameters: [],\n            elements: allElements,\n            elementsIdx: allElementsIdx,\n        })\n    }\n\n    // console.log(layoutDescriptions)\n    // console.log(allElements)\n    // console.log(allElementsIdx)\n\n    const elementInfo = []\n    const label2Encodings = {}\n    configs.forEach(\n        ({ entityType, entity2element, element2label, label2attr2diff }) => {\n            entity2element.forEach((eleIndexSet, entityIndex) => {\n                eleIndexSet.forEach((eleIndex) => {\n                    elementInfo[eleIndex] = {\n                        entityType,\n                        entityIndex,\n                    }\n                })\n            })\n            element2label.forEach((label, idx) => {\n                if (Number.isInteger(label)) {\n                    elementInfo[idx].label = label\n                }\n            })\n            label2Encodings[entityType] = label2attr2diff\n        }\n    )\n    console.log(label2Encodings)\n    // console.log(elementInfo)\n\n    return {\n        svg,\n        allElements,\n        allElementsIdx,\n        descriptions,\n        layoutDescriptions,\n        elementInfo,\n        label2Encodings,\n    }\n}\n","import { extractAttributes } from \"./utils.js\";\nimport {\n    generateLinkingConditions,\n    unionCondition,\n    excludeCondition,\n    accumulateCondition,\n} from './conditionOperations.js'\n\n\nfunction linkCondition(data, threshold = 0.8) {\n    const attrs = extractAttributes(data)\n\n    const nodeMap = {}\n    data.nodes.forEach(n => {\n        nodeMap[n.id] = n\n    })\n\n    // linkset\n\n    const linkSet = new Set()\n\n    data.links.forEach(l => {\n        linkSet.add(`${l.source}+${l.target}`)\n        linkSet.add(`${l.target}+${l.source}`)\n    })\n\n    // 没有边的，求并集\n\n    let excludeUnionResult = {}\n\n    Object.keys(nodeMap).forEach(source => {\n        Object.keys(nodeMap).forEach(target => {\n            const term = `${source}+${target}`\n            if (source === target || linkSet.has(term)) {\n                return\n            }\n\n            const conditions = generateLinkingConditions(nodeMap[source], nodeMap[target], attrs)\n            excludeUnionResult = unionCondition(excludeUnionResult, conditions)\n        })\n    })\n\n    /*\n    console.log('invalid condition union:')\n    console.log(excludeUnionResult)\n    */\n\n    // 有边的，逐个累计\n\n    let result = null\n\n    data.links.forEach(l => {\n        const sourceNode = nodeMap[l.source]\n        const targetNode = nodeMap[l.target]\n        const conditions = generateLinkingConditions(sourceNode, targetNode, attrs)\n        if (!result) {\n            result = excludeCondition(conditions, excludeUnionResult)\n        } else {\n            result = accumulateCondition(result, excludeCondition(conditions, excludeUnionResult))\n        }\n    })\n\n    /*\n    console.log('-------------------------------')\n    console.log('valid condition:')\n    console.log(result)\n    */\n\n\n    // 筛选出足够有说服力的\n\n    const linkCnt = data.links.length\n\n    const possibleConditions = []\n\n    for (const attr in result) {\n        for (const relation in result[attr]) {\n            if (typeof result[attr][relation] === 'number') {\n                // similar 特判\n                // TODO: 暂不考虑similar的结果\n                continue;\n            } else {\n                for (const value in result[attr][relation]) {\n                    if (result[attr][relation][value] > linkCnt * threshold) {\n                        possibleConditions.push({\n                            attribute: attr,\n                            relation: relation,\n                            value: value,\n                            frequency: result[attr][relation][value],\n                            coverage: result[attr][relation][value] / linkCnt\n                        })\n                    }\n                }\n            }\n        }\n    }\n    /*\n    console.log('-------------------------------')\n    console.log('final possible conditions:')\n    console.log(possibleConditions) \n    */\n\n    return possibleConditions\n\n\n    // debug\n\n    // const link1 = data.links[1]\n    // const cond1 = generateLinkingConditions(nodeMap[link1.source], nodeMap[link1.target], attrs)\n    // console.log(cond1)\n}\n\nexport {\n    linkCondition\n}","import { Card } from \"antd\"\nimport { useHistory } from \"react-router\"\nimport \"./GallaryItem.css\"\n\nexport function GallaryItem({ title, image, children, route }) {\n    const history = useHistory()\n    return (\n        <Card\n            hoverable\n            style={{\n                width: 350,\n                height: 420,\n                margin: 10,\n                borderRadius: 7,\n            }}\n            cover={\n                <img\n                    alt={title}\n                    src={image}\n                    style={{\n                        width: 320,\n                        height: 320,\n                        objectFit: \"contain\",\n                        borderRadius: \"7px 7px 0 0\",\n                    }}\n                />\n            }\n            onClick={() => {\n                history.push(route)\n            }}\n        >\n            <Card.Meta\n                style={{\n                    whiteSpace: \"normal\",\n                    height: 40,\n                }}\n                title={title}\n            />\n            <div\n                style={{\n                    height: 30,\n                    lineHeight: \"25px\",\n                    textOverflow: \"ellipsis\",\n                    overflow: \"hidden\",\n                }}\n            >\n                {children}\n            </div>\n        </Card>\n    )\n}\n","import { GallaryItem } from \"../components/GallaryItem\"\nimport { TitleBar } from \"../components/TitleBar\"\nimport \"./HomePage.css\"\n\nfunction HomePage() {\n    return (\n        <div\n            style={{\n                height: \"100vh\",\n                display: \"flex\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n                overflow: \"initial\",\n                backgroundColor: \"#f5f5f5\",\n            }}\n        >\n            <TitleBar />\n            <div\n                style={{\n                    width: \"80%\",\n                    maxWidth: 1000,\n                    marginTop: 80,\n                    marginBottom: 80,\n                }}\n            >\n                {/* <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: \"0 10px 0 10px\",\n                    }}\n                >\n                    <h1\n                        style={{\n                            fontFamily: \"Times\",\n                            fontSize: \"30px\",\n                            fontWeight: \"600\",\n                            borderBottom: \"2px #000 solid\",\n                        }}\n                    >\n                        GraphDescriptor: An Automatic Description Generator\n                        for Node-Link Diagrams\n                    </h1>\n                    <img\n                        alt=\"main\"\n                        src=\"main.jpg\"\n                        style={{\n                            width: \"60%\",\n                            margin: \"20px auto 20px auto\",\n                        }}\n                    /> \n                    <p\n                        style={{\n                            fontFamily: \"Times\",\n                            fontSize: \"1.2em\",\n                        }}\n                    >\n                        Node-link diagrams can effectively reveal relations and attributes of entities. However, non-professional users may have a low ability to read visual forms or be unskilled in exploring cluttered diagrams. This paper presents GraphDescriptor, an automatic description generation approach for node-link diagrams. The key idea is to extract relevant information from both the underlying data and the source code of visualization and generate textual descriptions with a template-based scheme. We design and develop an interactive interface for interactive specification, exploration, and modulation of descriptions. Diverse examples and a user study verify the utility and effectiveness of GraphDescriptor.\n                    </p>\n                </div>\n                <div\n                    style={{\n                        fontFamily: \"Times\",\n                        fontSize: 30,\n                        fontWeight: 600,\n                        margin: \"0 10px 10px 10px\",\n                        height: 50,\n                        borderBottom: \"2px #000 solid\",\n                    }}\n                >\n                    Gallary\n                </div> */}\n                <div\n                    style={{\n                        display: \"flex\",\n                        height: \"40vh\",\n                        flexWrap: \"wrap\",\n                        justifyContent: \"space-around\",\n                    }}\n                >\n                    <GallaryItem\n                        image={\"./data/imdb-movies-raw/imdb-movies.png\"}\n                        title={\"Movie-Actor-2019-China\"}\n                        route={\"/imdb-movies\"}\n                    >\n                        <span class=\"description-parameter\">49</span> nodes and{\" \"}\n                        <span class=\"description-parameter\">99</span> links\n                    </GallaryItem>\n                    <GallaryItem\n                        image={\n                            \"./data/imdb-movies-shapes/imdb-movies-shapes.png\"\n                        }\n                        title={\"Movie-Actor-Jean-Pierre\"}\n                        route={\"/imdb-movies-shapes\"}\n                    >\n                        <span class=\"description-parameter\">14</span> nodes and{\" \"}\n                        <span class=\"description-parameter\">25</span> links\n                    </GallaryItem>\n                    {/* </div>\n                <div\n                    style={{\n                        display: \"flex\",\n                        height: \"40vh\",\n                        flexWrap: \"wrap\",\n                        justifyContent: \"space-around\",\n                    }}\n                > */}\n                    <GallaryItem\n                        image={\"./data/imdb-actors/imdb-actors.png\"}\n                        title={\"Actor-Movie-2016-2021-China\"}\n                        route={\"/imdb-actors\"}\n                    >\n                        <span class=\"description-parameter\">17</span> nodes and{\" \"}\n                        <span class=\"description-parameter\">55</span> links\n                    </GallaryItem>\n                    <GallaryItem\n                        image={\"./data/imdb-movies-link/imdb-movies-link.png\"}\n                        title={\"Movie-Year-Nolan\"}\n                        route={\"/imdb-movies-link\"}\n                    >\n                        <span class=\"description-parameter\">11</span> nodes and{\" \"}\n                        <span class=\"description-parameter\">16</span> links\n                    </GallaryItem>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport { HomePage }\n","import { Main } from \"./Main\"\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\"\nimport { HomePage } from \"./pages/HomePage\"\nimport \"./utils/color.js\"\n\nconst titleMap = {\n    \"imdb-movies-shapes\": \"Movie-Actor-Jean-Pierre\",\n    \"imdb-movies\": \"Movie-Actor-2019-China\",\n    \"imdb-actors\": \"Actor-Movie-2016-2021-China\",\n    \"imdb-movies-link\": \"Movie-Year-Nolan\",\n}\n\nconst nodeMeaningsMap = {\n    \"imdb-movies-shapes\": \"movies directed by Jean-Pierre Melville\",\n    \"imdb-movies\": \"movies published in 2019, China\",\n    \"imdb-actors\":\n        \"actors who acted in more than five Chinese movies from 2016 to 2021\",\n    \"imdb-movies-link\": \"movies directed by Christopher Nolan\",\n}\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <HomePage />\n                </Route>\n                <Route\n                    path=\"/:demo\"\n                    render={({ match }) => {\n                        return (\n                            <Main\n                                title={titleMap[match.params.demo]}\n                                nodeMeanings={\n                                    nodeMeaningsMap[match.params.demo]\n                                }\n                            />\n                        )\n                    }}\n                ></Route>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}